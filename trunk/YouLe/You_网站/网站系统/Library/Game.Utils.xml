<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Game.Utils</name>
    </assembly>
    <members>
        <member name="T:Game.Utils.TypeParse">
            <summary>
            类型之间的转换,如:字符串与数字之间的转换
            </summary>
        </member>
        <member name="M:Game.Utils.TypeParse.StrToBool(System.Object,System.Boolean)">
            <summary>
            string型转换为bool型
            </summary>
            <param name="expression">要转换的字符串，如:"true","false"</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:Game.Utils.TypeParse.StrToInt(System.Object,System.Int32)">
            <summary>
            string型转换为int型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Game.Utils.TypeParse.StrToFloat(System.Object,System.Single)">
            <summary>
            string型转换为float型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值 </param>
            <returns>转换后的float类型结果</returns>
        </member>
        <member name="M:Game.Utils.TypeParse.SafeLongToInt32(System.Int64)">
            <summary>
            long型安全转换为int型
            </summary>
            <param name="expression">要转换的长整型</param>
            <returns>转换后的long类型结果</returns>
        </member>
        <member name="M:Game.Utils.TypeParse.IsNumericArray(System.String[])">
            <summary>
            判断给定的字符串数组(strNumber)中的数据是不是都为数值型
            </summary>
            <param name="strNumber">要确认的字符串数组</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="T:Game.Utils.DataProtector">
            <summary>
            完全数据保护类
            </summary>
        </member>
        <member name="M:Game.Utils.DataProtector.#ctor(Game.Utils.Store)">
            <summary>
            
            </summary>
            <param name="tempStore"></param>
        </member>
        <member name="M:Game.Utils.DataProtector.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <param name="optionalEntropy"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataProtector.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="cipherText"></param>
            <param name="optionalEntropy"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataProtector.Encrypt(System.String)">
            <summary>
            本地加密,依赖本地机器
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataProtector.Decrypt(System.String)">
            <summary>
            本地解密,依赖本地机器
            </summary>
            <param name="cipherText"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.Store">
            <summary>
            存储方式
            </summary>
        </member>
        <member name="F:Game.Utils.Store.Machine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.Store.User">
            <summary>
            
            </summary>
        </member>
        <member name="T:Game.Utils.FTP">
            <summary>
            FTP类
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.server">
            <summary>
            服务器连接地址
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.user">
            <summary>
            登陆帐号
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.pass">
            <summary>
            登陆口令
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.timeout">
            <summary>
            无响应时间（FTP在指定时间内无响应）
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.errormessage">
            <summary>
            服务器错误状态信息
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.messages">
            <summary>
            服务器状态返回信息
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.responseStr">
            <summary>
            服务器的响应信息
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.passive_mode">
            <summary>
            链接模式（主动或被动，默认为被动）
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.bytes_total">
            <summary>
            上传或下载信息字节数
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.file_size">
            <summary>
            上传或下载的文件大小
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.main_sock">
            <summary>
            主套接字
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.main_ipEndPoint">
            <summary>
            要链接的网络地址终结点
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.listening_sock">
            <summary>
            侦听套接字
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.data_sock">
            <summary>
            数据套接字
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.data_ipEndPoint">
            <summary>
            要链接的网络数据地址终结点
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.file">
            <summary>
            用于上传或下载的文件流对象
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.response">
            <summary>
            与FTP服务器交互的状态值
            </summary>
        </member>
        <member name="F:Game.Utils.FTP.bucket">
            <summary>
            读取并保存当前命令执行后从FTP服务器端返回的数据信息
            </summary>
        </member>
        <member name="M:Game.Utils.FTP.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Game.Utils.FTP.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="server">服务器IP或名称</param>
            <param name="user">登陆帐号</param>
            <param name="pass">登陆口令</param>
        </member>
        <member name="M:Game.Utils.FTP.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="server">服务器IP或名称</param>
            <param name="port">端口号</param>
            <param name="user">登陆帐号</param>
            <param name="pass">登陆口令</param>
        </member>
        <member name="M:Game.Utils.FTP.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="server">服务器IP或名称</param>
            <param name="port">端口号</param>
            <param name="user">登陆帐号</param>
            <param name="pass">登陆口令</param>
            <param name="mode">链接方式</param>
        </member>
        <member name="M:Game.Utils.FTP.#ctor(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="server">服务器IP或名称</param>
            <param name="port">端口号</param>
            <param name="user">登陆帐号</param>
            <param name="pass">登陆口令</param>
            <param name="mode">链接方式</param>
            <param name="timeout_sec">无响应时间(限时),单位:秒 (小于或等于0为不受时间限制)</param>
        </member>
        <member name="M:Game.Utils.FTP.Fail">
            <summary>
            操作失败
            </summary>
        </member>
        <member name="M:Game.Utils.FTP.ReadResponse">
            <summary>
            返回服务器端返回信息
            </summary>
        </member>
        <member name="M:Game.Utils.FTP.OpenDataSocket">
            <summary>
            打开数据套接字
            </summary>
        </member>
        <member name="M:Game.Utils.FTP.Disconnect">
            <summary>
            关闭所有链接
            </summary>
        </member>
        <member name="M:Game.Utils.FTP.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
            链接到FTP服务器
            </summary>
            <param name="server">要链接的IP地址或主机名</param>
            <param name="port">端口号</param>
            <param name="user">登陆帐号</param>
            <param name="pass">登陆口令</param>
        </member>
        <member name="M:Game.Utils.FTP.Connect(System.String,System.String,System.String)">
            <summary>
            链接到FTP服务器
            </summary>
            <param name="server">要链接的IP地址或主机名</param>
            <param name="user">登陆帐号</param>
            <param name="pass">登陆口令</param>
        </member>
        <member name="M:Game.Utils.FTP.Connect">
            <summary>
            链接到FTP服务器
            </summary>
        </member>
        <member name="M:Game.Utils.FTP.List">
            <summary>
            获取FTP当前(工作)目录下的文件列表
            </summary>
            <returns>返回文件列表数组</returns>
        </member>
        <member name="M:Game.Utils.FTP.ListFiles">
            <summary>
            获取到文件名列表
            </summary>
            <returns>返回文件名列表</returns>
        </member>
        <member name="M:Game.Utils.FTP.ListDirectories">
            <summary>
            获取路径列表
            </summary>
            <returns>返回路径列表</returns>
        </member>
        <member name="M:Game.Utils.FTP.GetFileDateRaw(System.String)">
            <summary>
            获取原始数据信息.
            </summary>
            <param name="fileName">远程文件名</param>
            <returns>返回原始数据信息.</returns>
        </member>
        <member name="M:Game.Utils.FTP.GetFileDate(System.String)">
            <summary>
            得到文件日期.
            </summary>
            <param name="fileName">远程文件名</param>
            <returns>返回远程文件日期</returns>
        </member>
        <member name="M:Game.Utils.FTP.GetWorkingDirectory">
            <summary>
            获取FTP上的当前(工作)路径
            </summary>
            <returns>返回FTP上的当前(工作)路径</returns>
        </member>
        <member name="M:Game.Utils.FTP.ChangeDir(System.String)">
            <summary>
            跳转服务器上的当前(工作)路径
            </summary>
            <param name="path">要跳转的路径</param>
        </member>
        <member name="M:Game.Utils.FTP.MakeDir(System.String)">
            <summary>
            创建指定的目录
            </summary>
            <param name="dir">要创建的目录</param>
        </member>
        <member name="M:Game.Utils.FTP.RemoveDir(System.String)">
            <summary>
            移除FTP上的指定目录
            </summary>
            <param name="dir">要移除的目录</param>
        </member>
        <member name="M:Game.Utils.FTP.RemoveFile(System.String)">
            <summary>
            移除FTP上的指定文件
            </summary>
            <param name="filename">要移除的文件名称</param>
        </member>
        <member name="M:Game.Utils.FTP.RenameFile(System.String,System.String)">
            <summary>
            重命名FTP上的文件
            </summary>
            <param name="oldfilename">原文件名</param>
            <param name="newfilename">新文件名</param>
        </member>
        <member name="M:Game.Utils.FTP.GetFileSize(System.String)">
            <summary>
            获得指定文件的大小(如果FTP支持)
            </summary>
            <param name="filename">指定的文件</param>
            <returns>返回指定文件的大小</returns>
        </member>
        <member name="M:Game.Utils.FTP.OpenUpload(System.String)">
            <summary>
            上传指定的文件
            </summary>
            <param name="filename">要上传的文件</param>
        </member>
        <member name="M:Game.Utils.FTP.OpenUpload(System.String,System.String)">
            <summary>
            上传指定的文件
            </summary>
            <param name="filename">本地文件名</param>
            <param name="remotefilename">远程要覆盖的文件名</param>
        </member>
        <member name="M:Game.Utils.FTP.OpenUpload(System.String,System.Boolean)">
            <summary>
            上传指定的文件
            </summary>
            <param name="filename">本地文件名</param>
            <param name="resume">如果存在,则尝试恢复</param>
        </member>
        <member name="M:Game.Utils.FTP.OpenUpload(System.String,System.String,System.Boolean)">
            <summary>
            上传指定的文件
            </summary>
            <param name="filename">本地文件名</param>
            <param name="remote_filename">远程要覆盖的文件名</param>
            <param name="resume">如果存在,则尝试恢复</param>
        </member>
        <member name="M:Game.Utils.FTP.OpenDownload(System.String)">
            <summary>
            下载指定文件
            </summary>
            <param name="filename">远程文件名称</param>
        </member>
        <member name="M:Game.Utils.FTP.OpenDownload(System.String,System.Boolean)">
            <summary>
            下载并恢复指定文件
            </summary>
            <param name="filename">远程文件名称</param>
            <param name="resume">如文件存在,则尝试恢复</param>
        </member>
        <member name="M:Game.Utils.FTP.OpenDownload(System.String,System.String)">
            <summary>
            下载指定文件
            </summary>
            <param name="remote_filename">远程文件名称</param>
            <param name="localfilename">本地文件名</param>
        </member>
        <member name="M:Game.Utils.FTP.OpenDownload(System.String,System.String,System.Boolean)">
            <summary>
            打开并下载文件
            </summary>
            <param name="remote_filename">远程文件名称</param>
            <param name="local_filename">本地文件名</param>
            <param name="resume">如果文件存在则恢复</param>
        </member>
        <member name="M:Game.Utils.FTP.DoUpload">
            <summary>
            上传文件(循环调用直到上传完毕)
            </summary>
            <returns>发送的字节数</returns>
        </member>
        <member name="M:Game.Utils.FTP.DoDownload">
            <summary>
            下载文件(循环调用直到下载完毕)
            </summary>
            <returns>接收到的字节点</returns>
        </member>
        <member name="P:Game.Utils.FTP.IsConnected">
            <summary>
            当前是否已连接
            </summary>
        </member>
        <member name="P:Game.Utils.FTP.MessagesAvailable">
            <summary>
            当message缓冲区有数据则返回
            </summary>
        </member>
        <member name="P:Game.Utils.FTP.Messages">
            <summary>
            获取服务器状态返回信息, 并清空messages变量
            </summary>
        </member>
        <member name="P:Game.Utils.FTP.ResponseString">
            <summary>
            最新指令发出后服务器的响应
            </summary>
        </member>
        <member name="P:Game.Utils.FTP.BytesTotal">
             <summary>
            在一次传输中,发送或接收的字节数
             </summary>
        </member>
        <member name="P:Game.Utils.FTP.FileSize">
             <summary>
            被下载或上传的文件大小,当文件大小无效时为0
             </summary>
        </member>
        <member name="P:Game.Utils.FTP.PassiveMode">
            <summary>
            链接模式: 
            true 被动模式 [默认]
            false: 主动模式
            </summary>
        </member>
        <member name="T:Game.Utils.TimeUnit">
            <summary>
            时间单位
            </summary>
        </member>
        <member name="F:Game.Utils.TimeUnit.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Game.Utils.TimeUnit.Minute">
            <summary>
            分
            </summary>
        </member>
        <member name="F:Game.Utils.TimeUnit.Hour">
            <summary>
            时
            </summary>
        </member>
        <member name="F:Game.Utils.TimeUnit.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="T:Game.Utils.TextEncrypt">
            <summary>
            在应用程序中定义用于单向加密文本的方法
            </summary>
        </member>
        <member name="M:Game.Utils.TextEncrypt.DSAEncryptPassword(System.String)">
            <summary>
            DSA 加密
            </summary>
            <param name="password">要加密的字符串</param>
            <returns>等效于此实例经过 DSA 加密密文</returns>
        </member>
        <member name="M:Game.Utils.TextEncrypt.EncryptPassword(System.String)">
            <summary>
            MD5 加密 
            </summary>
            <param name="password">要加密的字符串</param>
            <returns>等效于此实例经过 MD5 加密密文</returns>
        </member>
        <member name="M:Game.Utils.TextEncrypt.MD5EncryptPassword(System.String)">
            <summary>
            MD5 加密 
            </summary>
            <param name="password">要加密的字符串</param>
            <returns>等效于此实例经过 MD5 加密密文</returns>
        </member>
        <member name="M:Game.Utils.TextEncrypt.MD5EncryptPassword(System.String,Game.Utils.MD5ResultMode)">
            <summary>
            MD5 加密
            </summary>
            <param name="password">要加密的字符串</param>
            <param name="mode">加密强度</param>
            <returns>等效于此实例经过 MD5 加密密文</returns>
        </member>
        <member name="M:Game.Utils.TextEncrypt.SHA1EncryptPassword(System.String)">
            <summary>
            SHA1 加密
            </summary>
            <param name="password">要加密的字符串</param>
            <returns>等效于此实例经过 SHA1 加密</returns>
        </member>
        <member name="M:Game.Utils.TextEncrypt.SHA256(System.String)">
            <summary>
            SHA256 加密
            </summary>
            <param name="password">要加密的字符串</param>
            <returns>等效此实例经过 SHA256 加密密文</returns>
        </member>
        <member name="M:Game.Utils.TextEncrypt.Base64Encode(System.String)">
            <summary>
            Base64 编码
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextEncrypt.Base64Decode(System.String)">
            <summary>
            Base64 解码
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.MD5ResultMode">
            <summary>
            MD5 加密的强度模式 
            </summary>
        </member>
        <member name="F:Game.Utils.MD5ResultMode.Strong">
            <summary>
            强密码模式 
            </summary>
        </member>
        <member name="F:Game.Utils.MD5ResultMode.Weak">
            <summary>
            弱密码模式 
            </summary>
        </member>
        <member name="T:Game.Utils.Terminator">
            <summary>
            程序终止调度
            </summary>
        </member>
        <member name="M:Game.Utils.Terminator.End">
            <summary>
            end
            </summary>
        </member>
        <member name="M:Game.Utils.Terminator.Alert(System.String)">
            <summary>
            alert javascript
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Game.Utils.Terminator.Alert(System.String,System.String)">
            <summary>
            alert javascript
            </summary>
            <param name="s"></param>
            <param name="backurl"></param>
        </member>
        <member name="M:Game.Utils.Terminator.Throw(System.String)">
            <summary>
            stop
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Game.Utils.Terminator.Throw(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            输出指定的提示信息
            </summary>
            <param name="message">提示内容</param>
            <param name="title">标题</param>
            <param name="links">链拉</param>
            <param name="autojump">自动跳转定向地址</param>
            <param name="showback">是否显示返回链接</param>
        </member>
        <member name="P:Game.Utils.Terminator.template">
            <summary>
            页面终止页面模板
            </summary>
        </member>
        <member name="T:Game.Utils.JavaScript">
            <summary>
            通用的向Page中注册JavaScript的辅助类。
            本类中的方法只能用在*.aspx.cs中，而不能用在非页面后台代码文件中。
            注意：不可继承或实例化该类，
            在不支持JavaScript的浏览器中会失效
            <author>Peter Lee</author>  
            </summary>
        </member>
        <member name="F:Game.Utils.JavaScript.tagBegin">
            <summary>
            代表JavaScript的脚本声明开始的字符串。
            </summary>
        </member>
        <member name="F:Game.Utils.JavaScript.tagEnd">
            <summary>
            代表JavaScript的脚本声明结束的字符串。
            </summary>
        </member>
        <member name="M:Game.Utils.JavaScript.InsertScriptToPage(System.String,System.String,System.Boolean)">
            <summary>
            使用键、脚本文本和指示是否添加脚本标记的布尔值向 System.Web.UI.Page 对象注册客户端脚本。
            注意：注册到页面后的脚本位置不能确定。
            </summary>
            <param name="key">要注册的客户端脚本的键。</param>
            <param name="script">要注册的客户端脚本文本，不一定是javaScript</param>
            <param name="addScriptTag">指示是否添加脚本标记的布尔值。</param>
            <returns>返回注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.InsertScriptToPage(System.String,System.String)">
            <summary>
            使用键和脚本文本向 System.Web.UI.Page 对象注册客户端脚本。
            注意：注册到页面后的脚本位置不能确定。
            </summary>
            <param name="key">要注册的客户端脚本的键。</param>
            <param name="javaScript">要注册的客户端脚本文本，不要包含脚本标记。</param>
            <returns>返回注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.InsertScriptToPage(System.String,System.Boolean)">
            <summary>
            使用脚本文本和指示是否添加脚本标记的布尔值向 System.Web.UI.Page 对象注册客户端脚本。
            注意：注册到页面后的脚本位置不能确定。
            </summary>
            <param name="script">要注册的客户端脚本文本。</param>
            <param name="addScriptTag">指示是否添加脚本标记的布尔值。</param>
        </member>
        <member name="M:Game.Utils.JavaScript.InsertScriptToPage(System.String)">
            <summary>
            使用脚本文本向 System.Web.UI.Page 对象注册客户端脚本。
            注意：注册到页面后的脚本位置不能确定。
            </summary>
            <param name="javaScript">要注册的客户端脚本文本，不要包含脚本标记。</param>
        </member>
        <member name="M:Game.Utils.JavaScript.ConfirmAndRedirect(System.String,System.String,System.String)">
            <summary>
            JavaScript确认对话框，确认后执行URL重定向。
            </summary>
            <param name="pageUrl">当用户点击"确定"时要转向的页面</param>
            <param name="key">给此脚本块一个唯一的key值，以防止在页面中重复注册脚本块</param>
            <param name="displayInfo">对话框要显示的内容文本</param>
            <returns>返回脚本注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ConfirmAndRedirect(System.String,System.String)">
            <summary>
            JavaScript确认对话框，确认后执行URL重定向。
            </summary>
            <param name="pageUrl">当用户点击"确定"时要转向的页面</param>
            <param name="displayInfo">对话框要显示的内容文本</param>
        </member>
        <member name="M:Game.Utils.JavaScript.GetConfirmAndRedirectScript(System.String,System.String)">
            <summary>
            获取显示 "JavaScript确认对话框，确认后执行URL重定向" 的脚本文本。
            </summary>
            <param name="pageUrl">当用户点击"确定"时要转向的页面</param>
            <param name="displayInfo">对话框要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ConfirmAndDo(System.String,System.String,System.String)">
            <summary>
            JavaScript确认对话框，确认后执行参数whatToDo的命令。
            </summary>
            <param name="whatToDo">当用户点击"确定"后要执行的javaScript命令，注意每语句末要加分号</param>
            <param name="key">给此脚本块一个唯一的key值，以防止在页面中重复注册脚本块</param>
            <param name="displayInfo">对话框要显示的内容文本</param>
            <returns>返回脚本注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ConfirmAndDo(System.String,System.String)">
            <summary>
            JavaScript确认对话框，确认后执行参数whatToDo的命令。
            </summary>
            <param name="whatToDo">当用户点击"确定"后要执行的JavaScript命令，注意每语句末要加分号</param>
            <param name="displayInfo">对话框要显示的内容文本</param>
        </member>
        <member name="M:Game.Utils.JavaScript.GetConfirmAndDoScript(System.String,System.String)">
            <summary>
            获取显示 "JavaScript确认对话框，确认后执行参数whatToDo的命令" 的脚本文本。
            </summary>
            <param name="whatToDo">当用户点击"确定"后要执行的javaScript命令，注意每语句末要加分号</param>
            <param name="displayInfo">对话框要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetReturnConfirmScript(System.String)">
            <summary>
            获取 "显示JavaScript确认对话框，确认后继续，否则停止" 的脚本文本。
            </summary>
            <param name="displayInfo">对话框要显示的内容文本</param>
            <returns>返回脚本注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.AlertAndRedirect(System.String,System.String,System.String)">
            <summary>
            JavaScript警告，警告后重定向。
            </summary>
            <param name="pageUrl">重定向的URL</param>
            <param name="key">给此脚本块一个唯一的key值，以防止在页面中重复注册脚本块</param>
            <param name="displayInfo">警告显示的内容文本</param>
            <returns>返回脚本注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.AlertAndRedirect(System.String,System.String)">
            <summary>
            JavaScript警告，警告后重定向。
            </summary>
            <param name="pageUrl">重定向的URL</param>
            <param name="displayInfo">警告显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetAlertAndRedirectScript(System.String,System.String)">
            <summary>
            获取 "显示JavaScript警告，警告后重定向" 的脚本文本。
            </summary>
            <param name="pageUrl">重定向的URL</param>
            <param name="displayInfo">警告显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.AlertAndDo(System.String,System.String,System.String)">
            <summary>
            JavaScript警告，警告后执行指定JavaScript命令。
            </summary>
            <param name="whatToDo">警告后要执行的JavaScript命令，注意每语句要以分号结尾</param>
            <param name="key">给此脚本块一个唯一的key值，以防止在页面中重复注册脚本块</param>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns>返回脚本注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.AlertAndDo(System.String,System.String)">
            <summary>
            JavaScript警告，警告后执行指定JavaScript命令。
            </summary>
            <param name="whatToDo">警告后要执行的JavaScript命令，注意每语句要以分号结尾</param>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetAlertAndDoScript(System.String,System.String)">
            <summary>
            获取 "显示JavaScript警告，警告后执行指定JavaScript命令" 的脚本文本。
            </summary>
            <param name="whatToDo">警告后要执行的JavaScript命令，注意每语句要以分号结尾</param>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.AlertAndCloseWindow(System.String,System.String)">
            <summary>
            显示警告并关闭窗口。
            </summary>
            <param name="key">给此脚本块一个唯一的key值，以防止在页面中重复注册脚本块</param>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns>返回脚本注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.AlertAndCloseWindow(System.String)">
            <summary>
            显示警告并关闭窗口。
            </summary>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetAlertAndCloseWindowScript(System.String)">
            <summary>
            获取 "显示警告并关闭窗口" 脚本文本。
            </summary>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.Alert(System.String,System.String)">
            <summary>
            JavaScript警告。
            </summary>
            <param name="key">给此脚本块一个唯一的key值，以防止在页面中重复注册脚本块</param>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns>返回脚本注册成功与否；如果失败，往往是由脚本块标识重复引起的</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.Alert(System.String)">
            <summary>
            JavaScript警告。
            </summary>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetAlertScript(System.String)">
            <summary>
            获取 "显示JavaScript警告" 的脚本文本。
            </summary>
            <param name="displayInfo">警告要显示的内容文本</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.CloseWindow">
            <summary>
            注册使窗体关闭的JavaScript脚本，并返回注册成功与否的布尔。
            </summary>
        </member>
        <member name="M:Game.Utils.JavaScript.CloseWindowWithRefreshOpener">
            <summary>
            注册使窗体关闭并刷新父窗口的JavaScript脚本，返回注册成功与否的布尔。
            </summary>
        </member>
        <member name="M:Game.Utils.JavaScript.CloseWindowNoConfirm">
            <summary>
            不加确认的关闭窗口。
            注意：此方法只适用于IE6。
            <remarks>此函数不适合于弹出窗口，请慎用</remarks>
            </summary>
        </member>
        <member name="M:Game.Utils.JavaScript.GoBack">
            <summary>
            注册使返回到前一页的JavaScript脚本，并返回注册成功与否的布尔。
            此脚本文本执行后的效果相当于用户点击浏览器的"后退"按钮。
            </summary>
        </member>
        <member name="M:Game.Utils.JavaScript.GoBackWithRefresh">
            <summary>
            注册使页面返回到前一页并刷新的JavaScript脚本，并返回注册成功与否的bool。
            此文本执行后的效果相当于用户点击浏览器的后退按钮后再点击刷新按钮。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.Redirect(System.String)">
            <summary>
            注册使页面重定向到指定的Url的javaScript脚本，并返回注册成功与否的布尔值。
            </summary>
            <param name="url">要定向到的页面的路径</param>
        </member>
        <member name="M:Game.Utils.JavaScript.GetRedirectScript(System.String)">
            <summary>
            获取 "使页面重定向到指定URL" 的JavaScript脚本文本。
            </summary>
            <param name="url">要定向到的页面的路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetOpenCentralWindowScript(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            获取"弹出位于屏幕中间的窗口"的脚本。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <param name="isWithToolbar">是否显示工具栏。</param>
            <param name="isWithMenubar">是否显示菜单栏。</param>
            <param name="resizable">窗口大小是否可调节。</param>
            <param name="isWithLocation">是否显示地址栏。</param>
            <param name="isWithStatusbar">是否显示状态栏。</param>
            <param name="isWithScrollbars">是否显示滚动条。</param>
            <param name="isFront">弹出窗体是否获取焦点。</param>
            <param name="autoCloseInSeconds">多少秒钟后自动关闭，小于0则不自动关闭。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenCentralWindow(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册 "弹出位于屏幕中间的窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <param name="isWithToolbar">是否显示工具栏。</param>
            <param name="isWithMenubar">是否显示菜单栏。</param>
            <param name="resizable">窗口大小是否可调节。</param>
            <param name="isWithLocation">是否显示地址栏。</param>
            <param name="isWithStatusbar">是否显示状态栏。</param>
            <param name="isWithScrollbars">是否显示滚动条。</param>
            <param name="isFront">弹出窗体是否获取焦点。</param>
            <param name="autoCloseInSeconds">多少秒钟后自动关闭，小于0则不自动关闭。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenCentralWindow(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册 "弹出位于屏幕中间的窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <param name="isWithToolbar">是否显示工具栏。</param>
            <param name="isWithMenubar">是否显示菜单栏。</param>
            <param name="resizable">窗口大小是否可调节。</param>
            <param name="isWithLocation">是否显示地址栏。</param>
            <param name="isWithStatusbar">是否显示状态栏。</param>
            <param name="isWithScrollbars">是否显示滚动条。</param>
            <param name="isFront">弹出窗体是否获取焦点。</param>
            <param name="autoCloseInSeconds">多少秒钟后自动关闭，小于0则不自动关闭。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetOpenCentralWindowScript(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            获取"弹出位于屏幕中间的窗口"的脚本。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenCentralWindow(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            注册 "弹出位于屏幕中间的窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenCentralWindow(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            注册 "弹出位于屏幕中间的窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetOpenWindowScript(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            获取"弹出窗口"的脚本。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <param name="left">弹出窗口左边距离浏览器窗口左边的距离，以像素为单位。</param>
            <param name="top">弹出窗口上边距离浏览器窗口上边的距离，以像素为单位。</param>
            <param name="isWithToolbar">是否显示工具栏。</param>
            <param name="isWithMenubar">是否显示菜单栏。</param>
            <param name="resizable">窗口大小是否可调节。</param>
            <param name="isWithLocation">是否显示地址栏。</param>
            <param name="isWithStatusbar">是否显示状态栏。</param>
            <param name="isWithScrollbars">是否显示滚动条。</param>
            <param name="isFront">弹出窗体是否获取焦点。</param>
            <param name="isFullScreen">弹出窗口是否全屏显示，当为true时height,width,left,top参数失效。</param>
            <param name="autoCloseInSeconds">多少秒钟后自动关闭，小于0则不自动关闭。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenWindow(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册 "弹出窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <param name="left">弹出窗口左边距离浏览器窗口左边的距离，以像素为单位。</param>
            <param name="top">弹出窗口上边距离浏览器窗口上边的距离，以像素为单位。</param>
            <param name="isWithToolbar">是否显示工具栏。</param>
            <param name="isWithMenubar">是否显示菜单栏。</param>
            <param name="resizable">窗口大小是否可调节。</param>
            <param name="isWithLocation">是否显示地址栏。</param>
            <param name="isWithStatusbar">是否显示状态栏。</param>
            <param name="isWithScrollbars">是否显示滚动条。</param>
            <param name="isFront">弹出窗体是否获取焦点。</param>
            <param name="isFullScreen">弹出窗口是否全屏显示，当为true时height,width,left,top参数失效。</param>
            <param name="autoCloseInSeconds">多少秒钟后自动关闭，小于0则不自动关闭。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenWindow(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            注册 "弹出窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <param name="left">弹出窗口左边距离浏览器窗口左边的距离，以像素为单位。</param>
            <param name="top">弹出窗口上边距离浏览器窗口上边的距离，以像素为单位。</param>
            <param name="isWithToolbar">是否显示工具栏。</param>
            <param name="isWithMenubar">是否显示菜单栏。</param>
            <param name="resizable">窗口大小是否可调节。</param>
            <param name="isWithLocation">是否显示地址栏。</param>
            <param name="isWithStatusbar">是否显示状态栏。</param>
            <param name="isWithScrollbars">是否显示滚动条。</param>
            <param name="isFront">弹出窗体是否获取焦点。</param>
            <param name="isFullScreen">弹出窗口是否全屏显示，当为true时height,width,left,top参数失效。</param>
            <param name="autoCloseInSeconds">多少秒钟后自动关闭，小于0则不自动关闭。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenWindow(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            注册 "弹出窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenWindow(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            注册 "弹出窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <param name="height">弹出窗口的高度，以像素为单位。</param>
            <param name="width">弹出窗口的宽度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetOpenFullScreenWindowScript(System.String,System.String)">
            <summary>
            获取 "弹出全屏窗口" 的脚本。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenFullScreenWindow(System.String,System.String)">
            <summary>
            注册 "弹出全屏窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.OpenFullScreenWindow(System.String,System.String,System.String)">
            <summary>
            注册 "弹出全屏窗口" 的脚本到页面中，并返回注册脚本成功与否的bool。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">弹出窗口页面的路径。</param>
            <param name="windowName">弹出窗口标题栏显示的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetShowModalDialogScript(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             获取 "打开模式网页对话框" 的脚本。
             注：这种模式对话框始终会显示在打开它的页面的上方，
             并阻止打开它的页面获得焦点，直到对话框被关闭。
            </summary>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <param name="isWithStatusbar">对话框是否显示状态栏。</param>
            <param name="isWithHelp">对话框是否显示帮助按钮。</param>
            <param name="resizable">对话框大小是否可以调节。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModalDialog(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            注册 "打开模式网页对话框" 的脚本到页面中，并返回注册成功与否。
            注：这种模式对话框始终会显示在打开它的页面的上方，
            并阻止打开它的页面获得焦点，直到对话框被关闭。
            </summary>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <param name="isWithStatusbar">对话框是否显示状态栏。</param>
            <param name="isWithHelp">对话框是否显示帮助按钮。</param>
            <param name="resizable">对话框大小是否可以调节。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModalDialog(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            注册 "打开模式网页对话框" 的脚本到页面中，并返回注册成功与否。
            注：这种模式对话框始终会显示在打开它的页面的上方，
            并阻止打开它的页面获得焦点，直到对话框被关闭。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <param name="isWithStatusbar">对话框是否显示状态栏。</param>
            <param name="isWithHelp">对话框是否显示帮助按钮。</param>
            <param name="resizable">对话框大小是否可以调节。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModalDialog(System.String,System.Int32,System.Int32)">
            <summary>
            注册 "打开模式网页对话框（不显示状态栏、帮助按钮且不可调节大小）" 的脚本到页面中，
            并返回注册成功与否。
            注：这种模式对话框始终会显示在打开它的页面的上方，
            并阻止打开它的页面获得焦点，直到对话框被关闭。
            </summary>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModalDialog(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            注册 "打开模式网页对话框（不显示状态栏、帮助按钮且不可调节大小）" 的脚本到页面中，
            并返回注册成功与否。
            注：这种模式对话框始终会显示在打开它的页面的上方，
            并阻止打开它的页面获得焦点，直到对话框被关闭。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetShowModelessDialogScript(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取 "打开非模式网页对话框" 的脚本。
            注：这种非模式对话框始终会显示在打开它的页面的上方，但不阻止打开它的页面获得焦点。
            </summary>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <param name="isWithStatusbar">对话框是否显示状态栏。</param>
            <param name="isWithHelp">对话框是否显示帮助按钮。</param>
            <param name="resizable">对话框大小是否可以调节。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModelessDialog(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            注册 "打开非模式网页对话框" 的脚本到页面中，并返回注册成功与否。
             注：这种非模式对话框始终会显示在打开它的页面的上方，但不阻止打开它的页面获得焦点。
            </summary>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <param name="isWithStatusbar">对话框是否显示状态栏。</param>
            <param name="isWithHelp">对话框是否显示帮助按钮。</param>
            <param name="resizable">对话框大小是否可以调节。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModelessDialog(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            注册 "打开非模式网页对话框" 的脚本到页面中，并返回注册成功与否。
             注：这种非模式对话框始终会显示在打开它的页面的上方，但不阻止打开它的页面获得焦点。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <param name="isWithStatusbar">对话框是否显示状态栏。</param>
            <param name="isWithHelp">对话框是否显示帮助按钮。</param>
            <param name="resizable">对话框大小是否可以调节。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModelessDialog(System.String,System.Int32,System.Int32)">
            <summary>
            注册 "打开非模式网页对话框（不显示状态栏、帮助按钮且不可调节大小）" 的脚本到页面中，
            并返回注册成功与否。
             注：这种非模式对话框始终会显示在打开它的页面的上方，但不阻止打开它的页面获得焦点。
            </summary>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ShowModelessDialog(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            注册 "打开非模式网页对话框（不显示状态栏、帮助按钮且不可调节大小）" 的脚本到页面中，
            并返回注册成功与否。
             注：这种非模式对话框始终会显示在打开它的页面的上方，但不阻止打开它的页面获得焦点。
            </summary>
            <param name="key">给这段脚本一个唯一的标识，以防止重复注册。</param>
            <param name="url">对话框要显示的页面的路径。</param>
            <param name="width">对话框的宽度，以像素为单位。</param>
            <param name="height">对话框的高度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetShowPopUpScript(System.String@,System.String@,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取 "显示PopUp提示" 的脚本。 
            提示的外观及大小位置由参数中给定。 
            典型用法： 
            string show; 
            string hide; 
            JavaScript.InsertScriptToPage( 
            JavaScript.ShowPopUp(out show,out hide,"red","3px","Hello...",250,500,0,100) );
            this.Button1.Attributes.Add("onmouseover",show); 
            this.Button1.Attributes.Add("onmouseout",hide);
            </summary>
            <param name="showPopUpFunctionName">输出的，显示PouUp的JavaScript函数名。</param>
            <param name="hidePopUpFunctionName">输出的，隐藏PouUp的JavaScript函数名。</param>
            <param name="backGroundColor">PopUp提示的背景色。</param>
            <param name="borderStyle">PopUp提示边框样式。</param>
            <param name="innerHTML">PopUp提示显示的HTML源。</param>
            <param name="height">PopUp提示的高度，以像素为单位。</param>
            <param name="width">PopUp提示的宽度，以像素为单位。</param>
            <param name="left">PopUp提示左边到document左边的距离，以为像素为单位。</param>
            <param name="top">PopUp提示上边到document上边的距离，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetShowPopUpScript(System.String@,System.String@,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            获取 "显示PopUp提示" 的脚本。 
            提示的位置在鼠标处；
            提示的外观及大小由参数中给定。 
            典型用法： 
            string show; 
            string hide; 
            JavaScript.InsertScriptToPage( 
            JavaScript.ShowPopUp(out show,out hide,"red","3px","Hello...",250,500) );
            this.Button1.Attributes.Add("onmouseover",show); 
            this.Button1.Attributes.Add("onmouseout",hide);
            </summary>
            <param name="showPopUpFunctionName">输出的，显示PouUp的JavaScript函数名。</param>
            <param name="hidePopUpFunctionName">输出的，隐藏PouUp的JavaScript函数名。</param>
            <param name="backGroundColor">PopUp提示的背景色。</param>
            <param name="borderStyle">PopUp提示边框样式。</param>
            <param name="innerHTML">PopUp提示显示的HTML源。</param>
            <param name="height">PopUp提示的高度，以像素为单位。</param>
            <param name="width">PopUp提示的宽度，以像素为单位。</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetAddFavoriteScript(System.String,System.String)">
            <summary>
            获得 "将页面加入收藏夹"的脚本文本 。
            </summary>
            <param name="url">加入收藏的地址</param>
            <param name="title">收藏标题</param>
            <returns>返回脚本</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetSetAsHomePageScript(System.String)">
            <summary>
            获取 "将指定URL设置为HomePage" 的JavaScript脚本文本
            </summary>
            <param name="url">指定的要设置为HomePage的URL</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.NoBeFramed(System.String)">
            <summary>
            注册防止使自己的网页被Frame的JavaScript脚本文本。
            返回注册成功与否的布尔。
            </summary>
            <param name="key">给这段脚本一个标识以防止重复注册</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.NoBeFramed">
            <summary>
            注册防止使自己的网页被Frame的JavaScript脚本文本。
            返回注册成功与否的布尔。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.NoSaved">
            <summary>
            注册防止完整保存当前页面的HTML。
            返回注册成功与否的布尔。
            </summary>
        </member>
        <member name="M:Game.Utils.JavaScript.NoSaved(System.String)">
            <summary>
            注册防止完整保存当前页面的HTML。
            返回注册成功与否的布尔。
            </summary>
            <param name="key">给这段脚本一个标识以防止重复注册</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.KillErrors">
            <summary>
            注册消除JavaScript脚本错误的JavaScript脚本文本。
            返回注册成功与否的布尔。
            </summary>
        </member>
        <member name="M:Game.Utils.JavaScript.KillErrors(System.String)">
            <summary>
            注册消除JavaScript脚本错误的JavaScript脚本。
            返回注册成功与否的布尔。
            </summary>
            <param name="key">给这段脚本一个标识以防止重复注册</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.SetTitle(System.String)">
            <summary>
            注册设置页面标题的脚本。
            返回注册脚本成功与否。
            </summary>
            <param name="title">要设置的标题</param>
            <returns>返回注册脚本成功与否</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.GetSetTitleScript(System.String)">
            <summary>
            获取设置页面标题的脚本文本。
            </summary>
            <param name="title">要设置的标题</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.SetTitle(System.String,System.String)">
            <summary>
            注册设置页面标题的脚本。
            返回注册脚本成功与否。
            </summary>
            <param name="key">给这段脚本一个标识以防止重复注册</param>
            <param name="title">要设置的标题</param>
            <returns>返回注册脚本成功与否</returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ReloadPageForNav4OnResized">
            <summary>
            Register script to page use to reloads the window if Nav4 resized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.JavaScript.ReloadPageForNav4OnResized(System.String)">
            <summary>
            Register script to page use to reloads the window if Nav4 resized.
            </summary>
            <param name="key">Give the script a keyword to avoid iternatively register</param>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.JavaScript.keyForScript">
            <summary>
            获取一个由当前时间生成的脚本标识，形如：20060409225500001，
            注意：不同时间获取的标识不同。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.CloseWindowScript">
            <summary>
            获取 "使窗体关闭" 的脚本文本。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.CloseWindowWithRefreshOpenerScript">
            <summary>
            获取 "注册使窗体关闭并刷新父窗口的JavaScript脚本，返回注册成功与否的布尔" 的脚本文本。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.CloseWindowNoConfirmScript">
            <summary>
            获取 "不加确认的关闭窗口" 的脚本文本。
            注意：此脚本只适用于IE6。
            <remarks>此函数不适合于弹出窗口，请慎用</remarks>
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.GoBackScript">
            <summary>
            获取 "使返回前一页" 的脚本文本。
            此脚本文本执行后的效果相当于用户点击浏览器的"后退"按钮。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.GoBackWithRefreshScript">
            <summary>
            获取 "使页面返回到前一页并刷新" 的JavaScript脚本文本。
            此文本执行后的效果相当于用户点击浏览器的后退按钮后再点击刷新按钮。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.LastModifiedScript">
            <summary>
            获取"显示最后更新日期"的JavaScript脚本文本。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.ReferrerScript">
            <summary>
            获取 "显示链接到当前页面的地址"的JavaScript脚本文本，即document.referrer。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.NoBeFramedScript">
            <summary>
            获取 "防止使自己的网页被Frame" 的JavaScript脚本文本。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.NoSavedHTML">
            <summary>
            获取 "防止完整保存当前页面" 的HTML文本。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.KillErrorsScript">
            <summary>
            获取 "消除JavaScript脚本错误" 的JavaScript脚本文本。
            </summary>
        </member>
        <member name="P:Game.Utils.JavaScript.ReloadPageForNav4OnResizedScript">
            <summary>
            Get "Register script to page use to reloads the window if Nav4 resized" script string.
            </summary>
        </member>
        <member name="T:Game.Utils.IPQuery">
            <summary>
            IP归属地查询类
            </summary>
        </member>
        <member name="M:Game.Utils.IPQuery.GetAddressWithIP(System.String)">
            <summary>
            返回IP查找结果
            </summary>
            <param name="IPValue">要查找的IP地址</param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.IPQuery.CZ_INDEX_INFO">
            <summary>
            辅助类，用于保存IP索引信息
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.CZ_INDEX_INFO.IpSet">
            <summary>
            开始位置
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.CZ_INDEX_INFO.IpEnd">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.CZ_INDEX_INFO.Offset">
            <summary>
            偏移值
            </summary>
        </member>
        <member name="M:Game.Utils.IPQuery.CZ_INDEX_INFO.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="T:Game.Utils.IPQuery.PHCZIP">
            <summary>
            读取纯真IP数据库类
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.bFilePathInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.FilePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.FileStrm">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Index_Set">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Index_End">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Index_Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Search_Index_Set">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Search_Index_End">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Search_Set">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Search_Mid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.IPQuery.PHCZIP.Search_End">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="dbFilePath"></param>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.Initialize">
            <summary>
            使用二分法查找索引区，初始化查找区间
            </summary>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.Dispose">
            <summary>
            关闭文件
            </summary>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.SetDbFilePath(System.String)">
            <summary>
            IP数据库路径
            </summary>
            <param name="dbFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.GetAddressWithIP(System.String)">
            <summary>
            获取IP地址归属地
            </summary>
            <param name="IPValue"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.ReadArea">
            <summary>
            读取区域
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.ReadString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.GetTag">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.IndexInfoAtPos(System.UInt32)">
            <summary>
            
            </summary>
            <param name="Index_Pos"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.IPToUInt32(System.String)">
            <summary>
            从IP转换为Int32
            </summary>
            <param name="IpValue"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.IsNumeric(System.String)">
            <summary>
            判断是否为数字
            </summary>
            <param name="str">待判断字符串</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.IPQuery.PHCZIP.GetUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.INIReader">
            <summary>
            INI文件的读写操作
            </summary>
        </member>
        <member name="F:Game.Utils.INIReader.iniPath">
            <summary>
            INI文件的完全路径
            </summary>
        </member>
        <member name="M:Game.Utils.INIReader.#ctor(System.String)">
            <summary>
            类的构造函数，传递INI文件全路径
            </summary>
            <param name="iniPath">INI文件全路径</param>
        </member>
        <member name="M:Game.Utils.INIReader.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Game.Utils.INIReader.IniReadValue(System.String,System.String)">
            <summary>
            读取指定的INI文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.INIReader.IniSectionWriteValue(System.String,System.Text.StringBuilder)">
            <summary>
            写
            </summary>
            <param name="Section"></param>
            <param name="str"></param>
        </member>
        <member name="M:Game.Utils.INIReader.IniSectionReadValue(System.String)">
            <summary>
            读取
            </summary>
            <param name="Section"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.INIReader.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:Game.Utils.INIReader.ClearSection(System.String)">
            <summary>
            删除ini文件下personal段落下的所有键
            </summary>
            <param name="Section"></param>
        </member>
        <member name="T:Game.Utils.CollectionHelper">
            <summary>
            集合辅助
            </summary>
        </member>
        <member name="M:Game.Utils.CollectionHelper.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            检查集合是否是 null 或 empty
            true 为 null 或 empty 否则 为  false
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CollectionHelper.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            检查集合是否是 null 或 empty
            true 为 null 或 empty 否则 为  false
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CollectionHelper.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            从集合中选取符合条件的元素
            </summary>       
        </member>
        <member name="M:Game.Utils.CollectionHelper.FindFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            返回符合条件的第一个元素
            </summary>      
        </member>
        <member name="M:Game.Utils.CollectionHelper.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            集合中是否包含满足predicate条件的元素。
            </summary>       
        </member>
        <member name="M:Game.Utils.CollectionHelper.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            集合中是否包含满足predicate条件的元素。
            </summary>       
        </member>
        <member name="M:Game.Utils.CollectionHelper.ActionOnSpecification``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Predicate{``0})">
            <summary>
            对集合中满足predicate条件的元素执行action。如果没有条件，predicate传入null。
            </summary>       
        </member>
        <member name="M:Game.Utils.CollectionHelper.ActionOnEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对集合中的每个元素执行action。
            </summary>        
        </member>
        <member name="M:Game.Utils.CollectionHelper.GetPart``1(``0[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ary"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CollectionHelper.GetPart``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ary"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CollectionHelper.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32@)">
            <summary>
            从已排序的列表中，采用二分查找找到目标在列表中的位置。
            如果刚好有个元素与目标相等，则返回true，且minIndex会被赋予该元素的位置；
            否则，返回false，且minIndex会被赋予比目标小且最接近目标的元素的位置
            </summary>       
        </member>
        <member name="T:Game.Utils.Properties.AppExceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Game.Utils.Properties.AppExceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Game.Utils.Properties.AppExceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Game.Utils.Properties.AppExceptions.IPdataFileNotExists">
            <summary>
              Looks up a localized string similar to 指定路径下的 IP 数据库不存在。.
            </summary>
        </member>
        <member name="P:Game.Utils.Properties.AppExceptions.Terminator_ExceptionTemplate">
            <summary>
              Looks up a localized string similar to &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
            	&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
            	&lt;head&gt;
            	&lt;title&gt;{$Title}  - Powered by www.foxuc.com&lt;/title&gt;
            	&lt;meta http-equiv=&apos;Content-Type&apos; content=&apos;text/html; charset={$Charset}&apos; /&gt;
            	&lt;meta name=&apos;description&apos; content=&apos;.NET类库 Game.Utils.dll 页面中止程序&apos; /&gt;		
            	{$AutoJump}
            	&lt;style type=&quot;text/css&quot;&gt;
            	body{margin:0;padding:0 100px;font:12px &quot;Segoe UI&quot;,Helvetica,Arial,sans-serif;backg [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Game.Utils.Properties.AppExceptions.WebConfigHasNotAddKey">
            <summary>
              Looks up a localized string similar to 缺少在 web.config 文件中设置 &lt;add key=&quot;{0}&quot; value=&quot;customValue&quot; /&gt;.
            </summary>
        </member>
        <member name="T:Game.Utils.Cookie">
            <summary>
            对Cookie操作进行封装
            </summary>
        </member>
        <member name="M:Game.Utils.Cookie.Get(System.String)">
            <summary>
            获取Cookie值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Cookie.Set(System.String)">
            <summary>
            设置Cookie值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Cookie.Save(System.Web.HttpCookie)">
            <summary>
             保存Cookie值
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:Game.Utils.Cookie.Remove(System.Web.HttpCookie)">
             <summary>
            移除Cookie值
             </summary>
             <param name="cookie"></param>
        </member>
        <member name="M:Game.Utils.Cookie.Remove(System.String)">
             <summary>
            移除Cookie值
             </summary>
             <param name="name"></param>
        </member>
        <member name="T:Game.Utils.TextUtility">
            <summary>
            提供用于处理字符串的方法
            </summary>
        </member>
        <member name="M:Game.Utils.TextUtility.CutLeft(System.String,System.Int32)">
            <summary>
            从给定字符串(originalVal)左侧开始截取指定长度(cutLength)个字符,[使用字节宽度]
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="cutLength">截取长度</param>
            <returns>返回截取后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CutRight(System.String,System.Int32)">
            <summary>
            从给定字符串(originalVal)右侧开始截取指定长度(cutLength)个字符,[使用方法Substring()]
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="cutLength">截取长度</param>
            <returns>返回截取后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CutString(System.String,System.Int32,System.Int32)">
            <summary>
            从给定字符串(originalVal)的(startIndex)索引位置开始截取指定长度(cutLength)的字符串
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="startIndex">截取开始的索引位置</param>
            <param name="cutLength">截取长度</param>
            <returns>返回截取后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CutString(System.String,System.Int32)">
            <summary>
            从给定字符串(originalVal)的(startIndex)索引位置开始截取到字符串末尾
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="startIndex">截取开始的索引位置</param>
            <returns>返回截取后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CutStringProlongSymbol(System.String,System.Int32)">
            <summary>
            从文本内容(originalVal)最左边开始截取指定长度(cutLength)的文本内容，并使用 "..."　省略截去的部分
            </summary>
            <param name="originalVal">原始文本内容</param>
            <param name="cutLength">截取长度</param>
            <returns>返回截取并使用"..."填充后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CutStringProlongSymbol(System.String,System.Int32,System.String)">
            <summary>
            从文本内容(originalVal)最左边开始截取指定长度(cutLength)的文本内容，并使用(prolongSymbol)省略截去的部分
            </summary>
            <remarks>如果(prolongSymbol)为空则使用"..."作为填充省略的字符串</remarks>
            <param name="originalVal">原始文本内容</param>
            <param name="cutLength">截取长度</param>
            <param name="prolongSymbol">填充省略的字符串</param>
            <returns>返回截取并使用(prolongSymbol)填充后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CutStringTitle(System.Object,System.Int32)">
            <summary>
            过滤XHtml标签，并截取指定长度的字符，用"..."省略截去的部分
            </summary>
            <param name="content">文本内容</param>
            <param name="cutLength">截取长度</param>
            <returns>返回过滤并截取后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ReplaceCnChar(System.String)">
            <summary>
            替换非中文字符
            </summary>
            <param name="originalVal">原始字符串</param>
            <returns>返回替换后的中文字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ReplaceLuceneSpecialChar(System.String)">
            <summary>
            替换搜索引擎Lucene指认的特殊字符,<![CDATA["+-,&&,||!(){}[]^"~*?:\"]]>
            </summary>
            <param name="originalVal">原始字符串</param>
            <returns>返回替换后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ReplaceStrUseSC(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            使用"*"替换原串(originalStr)中包含有字符串集合(sc)指定的字符串
            </summary>
            <param name="originalStr">原始文本</param>
            <param name="sc">被替换的字符串集合</param>
            <returns>返回替换后的文本内容</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ReplaceStrUseSC(System.String,System.String[])">
            <summary>
            使用"*"替换原串(originalStr)中包含有字符串数组(sc)指定的字符串
            </summary>
            <param name="originalStr">原始文本</param>
            <param name="sc">被替换的字符串数组</param>
            <returns>返回替换后的文本内容</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ReplaceStrUseStr(System.String,System.String,System.String)">
            <summary>
            使用(replaceStr)替换原串(originalStr)中包含有字符串(replacedStr)指定的字符串
            </summary>
            <param name="originalStr">原始文本</param>
            <param name="replacedStr">被替换的字符串</param>
            <param name="replaceStr">替换后的字符串</param>
            <returns>返回替换后的文本内容</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.RegexReplaceTags(System.String,System.String,System.Object[])">
            <summary>
            使用正则替换指定的标签文本
            </summary>
            <param name="originalStr">原始文本</param>
            <param name="specialChares">指定的标签文本</param>
            <param name="entityClasses">包含标签的对象</param>
            <returns>返回替换后的文本内容</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            删除给定字符串(originalStr)，从开始位置(startIndex)到字符串结束的字符，
            用 "..." 代替移除的部分
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="startIndex">开始位置</param>
            <param name="hasProlong">是否用 "..." 代替移除的部分</param>
            <returns>返回删除字符串后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.Remove(System.String,System.Int32)">
            <summary>
            删除给定字符串(originalStr)，从开始位置(startIndex)到字符串结束的字符
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="startIndex">开始位置</param>
            <returns>返回删除字符串后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.Remove(System.String,System.Int32,Game.Utils.RemoveTextMode)">
            <summary>
            按删除方式(RemoveTextMode)删除给定字符串(originalStr)，从开始位置(startIndex)到字符串结束的字符 
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="startIndex">开始位置</param>
            <param name="mode">移除子字符串的方式。</param>
            <returns>返回删除字符串后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.Remove(System.String,System.Int32,Game.Utils.RemoveTextMode,System.Boolean)">
            <summary>
            按删除方式(RemoveTextMode)删除给定字符串(originalStr)，从开始位置(startIndex)到字符串结束的字符,
            用 "..." 代替移除的部分
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="startIndex">开始位置</param>
            <param name="mode">移除方式</param>
            <param name="hasProlong">是否用 "..." 代替移除的部分</param>
            <returns>返回删除字符串后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.RemoveByteMode(System.String,System.Int32)">
            <summary>
            按删除方式(ByteMode)删除给定字符串(originalStr)，从开始位置(startIndex)到字符串结束的字符
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="startIndex">开始位置</param>
            <returns>返回删除字符串后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.SplitStrUseStr(System.String,System.String)">
            <summary>
            用字符串(separator)分割给定的字符串(originalStr)
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="separator">分割字符串</param>
            <returns>返回分割后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.SplitStrArray(System.String,System.String)">
            <summary>
            用字符串(separator)把给定的字符串(originalStr)分割成字符数组
            </summary>
            <param name="originalStr">原始字符串</param>
            <param name="separator">分割字符串</param>
            <returns>返回分割后的字符串数组</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.SplitStrUseLines(System.String,System.Int32)">
            <summary>
            分割文本内容 - 按行分割 <![CDATA[<br />,<p>]]>
            </summary>
            <remarks>请调用自动匹配标签,以补充<![CDATA[</p>]]></remarks>
            <param name="originalContent">原始文本内容</param>
            <param name="splitLines">分割行数</param>
            <returns>返回分割后的文本内容</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.Length(System.String)">
            <summary>
            获得字符串所占的存储字节数,中文占2字节
            </summary>
            <param name="originalVal">原始字符串</param>
            <returns>返回字符串中的字符数所需的指定字节数</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.RepeatStr(System.String,System.Int32)">
            <summary>
            复制字符串(repeatStr)为指定次数(repeatCount)
            </summary>
            <param name="repeatStr">重复字符串</param>
            <param name="repeatCount">重复次数</param>
            <returns>返回复制多次的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetEmailHostName(System.String)">
            <summary>
            获取 Email 的主机名称
            </summary>
            <param name="strEmail">Email 地址</param>
            <returns>返回 Email 的主机名称</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.EmptyTrimOrNull(System.String)">
            <summary>
            去除空格后，判断字符串是否为空。为空 true,非空 false
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ConvertCDATAStr(System.String)">
            <summary>
            转换字符串为 XML 格式的字符串, 即添加CDATA
            </summary>
            <param name="originalStr">原始字符串</param>
            <returns>返回加CDATA之后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.AddFirst(System.String,System.String)">
            <summary>
            检测某一字符串的第一个字符是否与指定的字符一致，否则在该字符串前加上这个字符
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="firstStr">匹配与添加的字符</param>
            <returns>返回匹配或添加后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.AddLast(System.String,System.String)">
            <summary>
            检测某一字符串的最后一个字符是否与指定的字符一致，否则在该字符串末尾加上这个字符
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="lastStr">匹配与添加的字符</param>
            <returns>返回匹配或添加后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DeleteFirst(System.String,System.String)">
            <summary>
            检测某一字符串的第一个字符是否与指定的字符一致，相同则删除这个字符
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="firstStr">匹配与添加的字符</param>
            <returns>返回匹配或删除后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DeleteLast(System.String,System.String)">
            <summary>
            检测某一字符串的最后一个字符是否与指定的字符一致，相同则删除这个字符
            </summary>
            <param name="originalVal">原始字符串</param>
            <param name="lastStr">匹配与添加的字符</param>
            <returns>返回匹配或删除后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.TransformFirstToLower(System.String)">
            <summary>
            转换字符串首字符为小写字符(对英文字符有效)
            </summary>
            <param name="originalVal">原始字符串</param>
            <returns>返回转换后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.TransformFirstToUpper(System.String)">
            <summary>
            转换字符串首字符为大写字符(对英文字符有效)
            </summary>
            <param name="originalVal">原始字符串</param>
            <returns>返回转换后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetFileNameFromPath(System.String)">
            <summary>
            获取一个文件(path)中引用的文件名称（包括文件扩展名）
            </summary>
            <param name="path">文件路径</param>
            <returns>返回文件名</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetFilenameFromUrl(System.String)">
            <summary>
            从 URL 中获取访问的文件名称
            </summary>
            <param name="url">URL 链接地址</param>
            <returns>返回文件名称</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetMapPath(System.String)">
            <summary>
            获取一个目录的绝对路径（适用于WEB应用程序）
            </summary>
            <param name="folderPath">目录路径</param>
            <returns>返回目录的绝对路径</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetRealPath(System.String)">
            <summary>
            获取服务器上的真正路径,(适用于Web应用没有建立请求会话的目录操作)
            </summary>
            <param name="strPath">目录路径</param>
            <returns>返回目录的绝对路径</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetFullPath(System.String)">
            <summary>
            获得物理路径,使用(AppDomain)
            </summary>
            <param name="strPath">路径</param>
            <returns>返回物理路径</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatDirectory(System.String)">
            <summary>
            转换文件路径中不规则字符,把"/"替换为"\\"
            </summary>
            <param name="path">文件路径</param>
            <returns>返回转换后的文件路径</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.InArray(System.String,System.String,System.String)">
            <summary>
            判断字符串1，是否存在于以固定分割符分割的字符串2中
            </summary>
            <param name="matchStr">要匹配的字符串</param>
            <param name="originalStr">固定分割符分割的字符串</param>
            <param name="separator">分割符号</param>
            <returns>存在返回是 true,否 false</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.InArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            判断字符串1，是否存在于以固定分割符分割的字符串2中(是否忽略大小写)
            </summary>
            <param name="matchStr">要匹配的字符串。</param>
            <param name="strArray">固定分割符分割的字符串</param>
            <param name="separator">分割符号</param>
            <param name="ignoreCase">忽略大小写</param>
            <returns>存在返回是 true,否 false</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.InArray(System.String,System.String[])">
            <summary>
            判断字符串1，是否存在于字符串数组中
            </summary>
            <param name="matchStr">要匹配的字符串</param>
            <param name="strArray">字符串数组</param>
            <returns>存在返回是 true,否 false</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.InArray(System.String,System.String[],System.Boolean)">
            <summary>
            判断字符串1，是否存在于字符串数组中(是否忽略大小写)
            </summary>
            <param name="matchStr">待搜索的字符串。</param>
            <param name="strArray">可能包含字符串的数组。</param>
            <param name="ignoreCase">是否忽略大小写。</param>
            <returns>存在返回是 true,否 false</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.InIPArray(System.String,System.String[])">
            <summary>
            判断 IP 是否在 IPArray 里存在
            </summary>
            <param name="ip">要确认的IP</param>
            <param name="ipArray">IP 数组</param>
            <returns>存在返回是 true,否 false</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.InArrayIndexOf(System.String,System.String[],System.Boolean)">
            <summary>
            检索字符串数组里的指定字符串，找到后返回该字符串在数组中的索引位置
            </summary>
            <param name="originalStr">要检索的字符串</param>
            <param name="strArray">可能包含该字符串的数组</param>
            <param name="ignoreCase">忽略大小写</param>
            <returns>返回字符串在数组里的索引位置,返回-1表示不存在</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.InArrayIndexOf(System.String,System.String[])">
            <summary>
            检索字符串数组里的指定字符串，找到后返回该字符串在数组中的索引位置(区分大小写)
            </summary>
            <param name="originalStr">要检索的字符串</param>
            <param name="strArray">可能包含字符串的数组。</param>
            <returns>返回字符串在数组里的索引位置,返回-1表示不存在</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CreateTemporaryPassword(System.Int32)">
            <summary>
            创建一下指定长度的临时密码
            </summary>
            <param name="length">临时密码最大长度</param>
            <returns>一个小于等于临时密码最大长度的密码串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CreateAuthStr(System.Int32)">
            <summary>
            创建验证码随机字符串(数字和字母)
            </summary>
            <param name="len">最大长度</param>
            <returns>返回指定最大长度的随机字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CreateAuthStr(System.Int32,System.Boolean)">
            <summary>
            创建验证码随机字符串
            </summary>
            <param name="len">最大长度</param>
            <param name="onlyNum">是否纯数字</param>
            <returns>返回指定最大长度的随机字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CreateRandomNum(System.Int32)">
            <summary>
            获取指定长度的纯数字随机数字串(以时间做随机种子)
            </summary>
            <param name="len">最大长度</param>
            <returns>返回指定最大长度的随机字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CreateRandomNum2(System.Int32)">
            <summary>
            获取指定长度的纯数字随机数字串(以RNGCryptoServiceProvider做随机种子)
            </summary>
            <param name="len">最大长度</param>
            <returns>返回指定最大长度的随机字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CreateRandomLowercase(System.Int32)">
            <summary>
            获取一个由26个小写字母组成的指定长度的随即字符串
            </summary>
            <param name="len">最大长度</param>
            <returns>返回指定最大长度的随机字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetNewSeed">
            <summary>
            产生随机数的种子
            </summary>
            <returns>返回随机数种子</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.CreateRandom(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            生成随机字符串。
            </summary>
            <param name="length">目标字符串的长度。</param>
            <param name="useNum">是否包含数字，1=包含，默认为包含。</param>
            <param name="useLow">是否包含小写字母，1=包含，默认为包含。</param>
            <param name="useUpp">是否包含大写字母，1=包含，默认为包含。</param>
            <param name="useSpe">是否包含特殊字符，1=包含，默认为不包含。</param>
            <param name="custom">要包含的自定义字符，直接输入要包含的字符列表。</param>
            <returns>指定长度的随机字符串。</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetDateTimeLongString">
            <summary>
            获取长日期字符串表示 yyyyMMddHHmmss000
            </summary>
            <returns>返回长日期字符串表示</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetDateTimeLongString(System.String)">
            <summary>
            获取长日期字符串表示 yyyyMMddHHmmss000,可以添加前缀
            </summary>
            <param name="prefix">前缀字符</param>
            <returns>返回添加前缀字符后的长日期字符串表示</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.TodayDate">
            <summary>
            今天日期,标准格式的当前日期 yyyy-MM-dd
            </summary>
            <returns>返回今天的日期</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.NowTime">
            <summary>
            现在时刻,标准格式的当前时间 HH:mm:ss
            </summary>
            <returns>返回现在时刻</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.NowDateTime">
            <summary>
            现在日期时刻 yyyy-MM-dd HH:mm:ss
            </summary>
            <returns>返回现在日期和时间</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.NowDateTimeF">
            <summary>
            现在日期和时间及毫秒 yyyy-MM-dd HH:mm:ss:fffffff
            </summary>
            <returns>返回当前日期和时间及毫秒</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ConvertIntToDateTime(System.Double)">
            <summary>
            转换一个double型数字串为时间，起始 0 为 1970-01-01 08:00:00
            原理是，每过一秒就在这个数字串上累加一
            </summary>
            <param name="dVal">要转换的数字</param>
            <returns>返回转换后的日期</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ConvertDateTimeToInt(System.DateTime)">
            <summary>
            转换时间为一个double型数字串，起始 0 为 1970-01-01 08:00:00
            原理就是，每过一秒就在这个数字串上累加一
            </summary>
            <param name="dateTime">要转换的时间</param>
            <returns>返回转换后的数字</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAddHours(System.DateTime,System.Int32)">
            <summary>
            计算给定的日期时间累加上给定的小时数，与现在相差的小时数量
            </summary>
            <param name="oneDateTime">要计算的日期</param>
            <param name="hours">累加的小时数</param>
            <returns>返回与现在相差的小时数量</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAddHours(System.String,System.Int32)">
            <summary>
            计算给定的日期时间累加上给定的小时数，与现在相差的小时数量
            </summary>
            <param name="oneDateTime">要计算的日期字符串</param>
            <param name="hours">累加的小时数</param>
            <returns>返回与现在相差的小时数量</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAddMinutes(System.DateTime,System.Int32)">
            <summary>
            计算给定的日期时间累加上给定的分钟数，与现在相差的分钟数量
            </summary>
            <param name="oneDateTime">要计算的日期对象</param>
            <param name="minutes">累加的分钟数</param>
            <returns>返回与现在相差的分钟数量</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAddMinutes(System.String,System.Int32)">
            <summary>
            计算给定的日期时间累加上给定的分钟数，与现在相差的分钟数量
            </summary>
            <param name="oneDateTime">要计算的日期字符串</param>
            <param name="minutes">累加的分钟数</param>
            <returns>返回与现在相差的分钟数量</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAddSeconds(System.DateTime,System.Int32)">
            <summary>
            计算给定的日期时间累加上给定的秒数，与现在相差的秒数量
            </summary>
            <param name="oneDateTime">要计算的日期对象</param>
            <param name="seconds">累加的秒数</param>
            <returns>返回与现在相差的秒数量</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAddSeconds(System.String,System.Int32)">
            <summary>
            计算给定的日期时间累加上给定的秒数，与现在相差的秒数量
            </summary>
            <param name="oneDateTime">要计算的日期字符串</param>
            <param name="seconds">累加的秒数</param>
            <returns>返回与现在相差的秒数量</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateDays(System.DateTime)">
            <summary>
            计算给定的日期时间距离现在的天数
            </summary>
            <param name="oneDateTime">要计算的日期对象</param>       
            <returns>返回与现在相差的天数</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateDays(System.String)">
            <summary>
            计算给定的日期时间距离现在的天数
            </summary>
            <param name="oneDateTime">要计算的日期字符串</param>       
            <returns>返回与现在相差的天数</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DayOfMonth(System.DateTime,System.Boolean)">
            <summary>
            获取当月的第一/最后一天
            </summary>
            <param name="oneDateTime">日期</param>
            <param name="isFirstDay">第一天 为 true， 最后一天为 false</param>
            <returns>返回当前月份的第一天或最后一天</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DayOfQuarter(System.DateTime,System.Boolean)">
            <summary>
            获取每季度的第一/最后一天
            </summary>
            <param name="oneDateTime">日期</param>
            <param name="isFirstDay">第一天 为 true， 最后一天为 false</param>
            <returns>返回当前日期所在季度的第一天或最后一天</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DayOfYear(System.DateTime,System.Boolean)">
            <summary>
            获取每年的第一/最后一天
            </summary>
            <param name="oneDateTime">日期</param>
            <param name="isFirstDay">第一天为 true，最后一天为 false</param>
            <returns>返回当前年份的第一天或最后一天</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAndTime(System.Object,System.Object)">
            <summary>
            二个时间差了多少天,多少小时的计算 
            </summary>
            <param name="todate"></param>
            <param name="fodate"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.DiffDateAndTime(System.Object,System.Object,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            二个时间差了多少天,多少小时的计算
            </summary>
            <param name="todate"></param>
            <param name="fodate"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <param name="v5"></param>
            <param name="v6"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetDBCToCase(System.String)">
            <summary>
            半角转全角
            </summary>
            <param name="dbc">半角字符串</param>
            <returns>转换后的全角字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.GetSBCToCase(System.String)">
            <summary>
            全角转半角
            </summary>
            <param name="sbc">全角字符串</param>
            <returns>转换后的半角串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ConvertCnCharToSpellFirst(System.String)">
            <summary>
            将指定字符串中的汉字转换为拼音首字母的缩写，其中非汉字保留为原字符
            </summary>
            <param name="cnStr">中文字符</param>
            <returns>返回汉语拼音首字母</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ConvertCnCharSpellFull(System.String)">
            <summary>
            将指定字符串中的汉字转换为拼音字母，其中非汉字保留为原字符
            </summary>
            <param name="cnText">中文字符</param>
            <returns>返回汉语拼音</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ToSChinese(System.String)">
            <summary>
            繁体中文转换为简体中文
            </summary>
            <param name="tcStr">简体中文字符串</param>
            <returns>转换后的繁体中文字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ToTChinese(System.String)">
            <summary>
            简体中文转换为繁体中文
            </summary>
            <param name="scStr">繁体中文字符串</param>
            <returns>简体中文字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.ConvertStreamToString(System.IO.Stream)">
            <summary>
            将 Stream 转化成 string
            </summary>
            <param name="s">Stream流</param>
            <returns>string</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatByteStrF(System.Int64)">
            <summary>
            格式化字节数字符串(带小数)
            </summary>
            <param name="bytes">大小</param>
            <returns>返回格式化字节</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatBytesStr(System.Int32)">
            <summary>
            格式化字节数字符串
            </summary>
            <param name="bytes">大小</param>
            <returns>返回格式化字节</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatFileSize(System.Int64)">
            <summary>
            格式化文件尺寸的方法。
            </summary>
            <param name="size">指定包含文件大小的字节数。</param>
            <returns>string</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatIP(System.String,System.Int32)">
            <summary>
            格式化 IP 地址, fields 3,2,1 保留左起三位，二位，一位
            隐藏IP地址最后一位用*号代替
            </summary>
            <param name="ip"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatMoney(System.Decimal)">
            <summary>
            格式化货币
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatDateSpan(System.Object)">
            <summary>
            把给定的日期格式化为距现在的模糊时间段，比如 1 分钟前
            </summary>
            <param name="dateSpan">日期</param>
            <returns>返回距现在的模糊时间段</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatSecondSpan(System.Int64)">
            <summary>
            计算模糊时间段，秒换算为X天X时X分X秒
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatDateTime(System.DateTime,System.Int32)">
            <summary>
            格式化日期输出
            1 ToString
            2 ToShortDateString
            3 yyyy年MM月dd日HH点mm分ss秒
            4 yyyy年MM月dd日
            5 yyyy年MM月dd日HH点mm分
            6 yyyy-MM-dd HH:mm
            7 yy年MM月dd日 HH点mm分
            </summary>
            <param name="oneDateVal">日期对象</param>
            <param name="formatType">输出类型</param>
            <returns>返回格式化后的日期串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.FormatDateTime(System.String,System.Int32)">
            <summary>
            格式化日期输出
            1 ToString
            2 ToShortDateString
            3 yyyy年MM月dd日HH点mm分ss秒
            4 yyyy年MM月dd日
            5 yyyy年MM月dd日HH点mm分
            6 yyyy-MM-dd HH:mm
            7 yy年MM月dd日 HH点mm分
            </summary>
            <param name="oneDateVal">日期字符串对象</param>
            <param name="formatType">输出类型</param>
            <returns>返回格式化后的日期串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.SqlEncode(System.String)">
            <summary>
            编码成 sql 文本可以接受的格式
            </summary>
            <param name="strSQL">SQL 语句</param>
            <returns>返回替换后的 SQL 语句</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.HtmlEncode(System.String)">
            <summary>
            HTML 编码
            </summary>
            <param name="originalStr"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.HtmlDecode(System.String)">
            <summary>
            HTML解码
            </summary>
            <param name="originalStr"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.TextEncode(System.String)">
             <summary>
             文本编码,回车/换行符 到 HTML 转换
            </summary>
            <param name="originalStr"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.TextDecode(System.String)">
            <summary>
            TEXT解码
            </summary>
            <param name="originalStr"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.EmailEncode(System.String)">
            <summary>
             Email 编码
            </summary>
            <param name="originalStr"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.JavaScriptEncode(System.String)">
            <summary>
            JavaScript 编码
            </summary>
            <param name="originalStr"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.JavaScriptEncode(System.Object)">
            <summary>
            JavaScript 编码
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.JoinString(System.String[])">
            <summary>
            高效字符串连接操作
            </summary>
            <param name="value">要连接的字符串</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextUtility.Join(System.String,System.String[])">
            <summary>
            高效字符串连接操作
            </summary>
            <param name="value">要连接的字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextUtility.JoinString(System.String,System.String[])">
            <summary>
            高效字符串连接操作
            </summary>
            <param name="value">要连接的字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.RemoveTextMode">
            <summary>
            移除子字符串的方式
            </summary>
        </member>
        <member name="F:Game.Utils.RemoveTextMode.ByteMode">
            <summary>
            按字节数移除指定字符串
            </summary>
        </member>
        <member name="F:Game.Utils.RemoveTextMode.Normal">
            <summary>
            按字符数移除指定字符串
            </summary>
        </member>
        <member name="T:Game.Utils.SerializationHelper">
            <summary>
            提供类的序列化的辅助操作
            </summary>
        </member>
        <member name="M:Game.Utils.SerializationHelper.Serialize``1(``0,System.String)">
            <summary>
            序列化对象到文件
            </summary>
            <param name="t">要序列化的泛型对象</param>
            <param name="filename">文件名</param>
        </member>
        <member name="M:Game.Utils.SerializationHelper.Deserialize(System.Type,System.String)">
            <summary>
            反序列化对象
            </summary>
            <param name="type">对象类型</param>
            <param name="filename">文件名</param>
            <returns>返回反序列化后的对象</returns>
        </member>
        <member name="M:Game.Utils.SerializationHelper.Serialize``1(``0)">
            <summary>
            序列化泛型对象为 byte[]
            </summary>
            <param name="t">要序列化的泛型对象</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.SerializationHelper.Deserialize(System.Byte[])">
            <summary>
            反序列化成 obj 对象 From byte[] 
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.AES">
            <summary>
            高级加密标准 (AES) 算法（又称为 Rijndael）
            </summary>
        </member>
        <member name="M:Game.Utils.AES.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cipherText">待解密的文本</param>
            <param name="cipherkey">密钥</param>
            <returns>返回与此实例等效的解密文本</returns>
        </member>
        <member name="M:Game.Utils.AES.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">待加密的文本</param>
            <param name="cipherkey">密钥</param>
            <returns>返回与此实例等效的加密文本</returns>
        </member>
        <member name="M:Game.Utils.AES.DecryptBuffer(System.Byte[],System.String)">
            <summary>
            解密
            </summary>
            <param name="cipherText">待解密的字节</param>
            <param name="cipherkey">密钥</param>
            <returns>返回与此实例等效的解密字节</returns>
        </member>
        <member name="M:Game.Utils.AES.EncryptBuffer(System.Byte[],System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">待加密的字节</param>
            <param name="cipherkey">密钥</param>
            <returns>返回与此实例等效的加密字节</returns>
        </member>
        <member name="T:Game.Utils.DES">
            <summary> 
            加密
            </summary> 
        </member>
        <member name="M:Game.Utils.DES.Encrypt(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:Game.Utils.DES.Decrypt(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="T:Game.Utils.EnumDescription">
            <summary>
            把枚举值按照指定的文本显示
            <remarks>
            一般通过枚举值的ToString()可以得到变量的文本，
            但是有时候需要的到与之对应的更充分的文本，
            这个类帮助达到此目的
            </remarks>
            </summary>
            <example>
            [EnumDescription("中文数字")]
            enum MyEnum
            {
            	[EnumDescription("数字一")]
            	One = 1, 
            
            	[EnumDescription("数字二")]
            	Two, 
            
            	[EnumDescription("数字三")]
            	Three
            }
            EnumDescription.GetEnumText(typeof(MyEnum));
            EnumDescription.GetFieldText(MyEnum.Two);
            EnumDescription.GetFieldTexts(typeof(MyEnum)); 
            </example>
        </member>
        <member name="M:Game.Utils.EnumDescription.#ctor(System.String,System.Int32)">
            <summary>
            描述枚举值
            </summary>
            <param name="description">描述内容</param>
            <param name="enumRank">排列顺序</param>
        </member>
        <member name="M:Game.Utils.EnumDescription.#ctor(System.String)">
            <summary>
            描述枚举值，默认排序为5
            </summary>
            <param name="description">描述内容</param>
        </member>
        <member name="M:Game.Utils.EnumDescription.GetEnumText(System.Type)">
            <summary>
            获取枚举的描述文本
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.EnumDescription.GetFieldText(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:Game.Utils.EnumDescription.ExistsEnumValue(System.Type,System.Int32)">
            <summary>
            是否存在枚举值
            </summary>
            <param name="enumType"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.EnumDescription.GetFieldTexts(System.Type)">
            <summary>
            获取枚举类型定义的所有文本，按定义的顺序返回
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <param name="enumType">枚举类型</param>
            <returns>所有定义的文本</returns>
        </member>
        <member name="M:Game.Utils.EnumDescription.GetFieldTexts(System.Type,Game.Utils.EnumDescription.SortType)">
            <summary>
            获取枚举类型定义的所有文本
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="sortType">排序类型</param>
            <returns>枚举描述集合</returns>
        </member>
        <member name="P:Game.Utils.EnumDescription.Description">
            <summary>
            描述内容
            </summary>
        </member>
        <member name="P:Game.Utils.EnumDescription.EnumRank">
            <summary>
            排序顺序
            </summary>
        </member>
        <member name="P:Game.Utils.EnumDescription.EnumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:Game.Utils.EnumDescription.FieldName">
            <summary>
            枚举字段
            </summary>
        </member>
        <member name="T:Game.Utils.EnumDescription.SortType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:Game.Utils.EnumDescription.SortType.Default">
             <summary>
            按枚举顺序默认排序
             </summary>
        </member>
        <member name="F:Game.Utils.EnumDescription.SortType.DisplayText">
            <summary>
            按描述值排序
            </summary>
        </member>
        <member name="F:Game.Utils.EnumDescription.SortType.Rank">
            <summary>
            按排序熵
            </summary>
        </member>
        <member name="T:Game.Utils.UCException">
            <summary>
            UC 自定义异常类
            </summary>
        </member>
        <member name="M:Game.Utils.UCException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.UCException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Game.Utils.FrameworkExcption">
            <summary>
            在应用框架中发生非致命工具操作错误时引发的异常
            </summary>
        </member>
        <member name="M:Game.Utils.FrameworkExcption.#ctor(System.String)">
            <summary>
            表示在应用程序执行期间发生的输入输出错误
            </summary>
            <param name="message">错误的提示文本</param>
        </member>
        <member name="M:Game.Utils.FrameworkExcption.#ctor(System.String,System.String[])">
            <summary>
            表示在应用程序执行期间发生的输入输出错误 
            </summary>
            <param name="message">错误的提示文本</param>
            <param name="args">用于格式化错误提示文本的一个或多个参数</param>
        </member>
        <member name="M:Game.Utils.FrameworkExcption.GetException(System.String)">
            <summary>
            获取本地化异常信息资源
            </summary>
            <param name="name">异常信息的资源名</param>
            <returns>本地化异常信息资源</returns>
        </member>
        <member name="M:Game.Utils.FrameworkExcption.GetException(System.String,System.String[])">
            <summary>
            获取本地化异常信息资源 
            </summary>
            <param name="name">异常信息的资源名</param>
            <param name="args">包含零个或多个格式化异常信息的对象的数组</param>
            <returns>本地化异常信息资源</returns>
        </member>
        <member name="T:Game.Utils.Caching">
            <summary>
            对缓存操作进行封装
            </summary>
        </member>
        <member name="M:Game.Utils.Caching.Get(System.String)">
            <summary>
            获取缓存内容
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching.Get``1(System.String)">
            <summary>
            获取缓存内容
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching.Set(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            设置缓存
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="cacheDependency"></param>
        </member>
        <member name="M:Game.Utils.Caching.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime)">
            <summary>
            设置缓存
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="cacheDependency"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Game.Utils.Caching.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="cacheDependency"></param>
            <param name="ts"></param>
        </member>
        <member name="M:Game.Utils.Caching.Set(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            设置缓存
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="cacheDependency"></param>
            <param name="dt"></param>
            <param name="ts"></param>
        </member>
        <member name="M:Game.Utils.Caching.Remove(System.String)">
            <summary>
            清除缓存
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Game.Utils.CDATA">
            <summary>
            不被解析的字符数据处理类
            </summary>
        </member>
        <member name="M:Game.Utils.CDATA.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.CDATA.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Game.Utils.CDATA.Text">
            <summary>
            
            </summary>
        </member>
        <member name="T:Game.Utils.CacheUtil">
            <summary>
            缓存工具
            </summary>
        </member>
        <member name="M:Game.Utils.CacheUtil.Add``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Add``1(System.String,``0,Game.Utils.CacheTime)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Add``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Add``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType,System.Web.Caching.CacheDependency)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
            <param name="dependencies"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Add``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
            <param name="dependencies"></param>
            <param name="cacheItemPriority"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Add``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
            <param name="dependencies"></param>
            <param name="cacheItemPriority"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Set``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Set``1(System.String,``0,Game.Utils.CacheTime)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Set``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Set``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType,System.Web.Caching.CacheDependency)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
            <param name="dependencies"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Set``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
            <param name="dependencies"></param>
            <param name="cacheItemPriority"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Set``1(System.String,``0,Game.Utils.CacheTime,Game.Utils.CacheExpiresType,System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
            <param name="cacheExpiresType"></param>
            <param name="dependencies"></param>
            <param name="cacheItemPriority"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.CacheUtil.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.RemoveBySearch(System.String[])">
            <summary>
            
            </summary>
            <param name="startTexts"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.RemoveBySearch(System.String)">
            <summary>
            
            </summary>
            <param name="startText"></param>
        </member>
        <member name="M:Game.Utils.CacheUtil.Contains``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CacheUtil.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CacheUtil.GetBySearch``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startText"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CacheUtil.GetCacheDependencyFromKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CacheUtil.TryGetValue``1(System.String,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.CacheExpiresType">
            <summary>
            缓存过期类别
            </summary>
        </member>
        <member name="F:Game.Utils.CacheExpiresType.Absolute">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.CacheExpiresType.Sliding">
            <summary>
            
            </summary>
        </member>
        <member name="T:Game.Utils.CacheTime">
            <summary>
            缓存时间
            </summary>
        </member>
        <member name="F:Game.Utils.CacheTime.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.CacheTime.Long">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.CacheTime.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.CacheTime.NotRemovable">
            <summary>
            
            </summary>
        </member>
        <member name="F:Game.Utils.CacheTime.Short">
            <summary>
            
            </summary>
        </member>
        <member name="T:Game.Utils.TextLogger">
            <summary>
            文本日志文件操作类
            </summary>
        </member>
        <member name="F:Game.Utils.TextLogger.APP_LOG_DIRECTORY">
            <summary>
            日志文件存放目录
            </summary>
        </member>
        <member name="M:Game.Utils.TextLogger.Write(System.String)">
            <summary>
            写日志文件
            </summary>
            <param name="logContent">日志内容</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextLogger.Write(System.String,System.String)">
            <summary>
            写日志文件
            </summary>
            <param name="logContent">日志内容</param>
            <param name="fileName">日志文件名</param>
            <returns>返回值true成功,false失败</returns>
        </member>
        <member name="M:Game.Utils.TextLogger.Write(System.String,System.String,System.String)">
            <summary>
            写日志文件
            </summary>
            <param name="classUrl">类名或页面名称</param>
            <param name="funcName">方法名称</param>
            <param name="logContent">日志内容</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextLogger.Write(System.Type,System.String,System.String)">
            <summary>
            写日志文件：
            时间--classUrl/FuncName
            	text
            </summary>
            <param name="cType">类型</param>
            <param name="funcName">方法名称</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:Game.Utils.TextLogger.GetTextLogger">
            <summary>
            读取文件日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextLogger.GetTextLogger(System.String)">
            <summary>
            读取文件日志
            </summary>
            <param name="filePath">文件物理路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextLogger.LoadFile(System.String)">
             <summary>
            返回文件内容.
             </summary>
             <param name="path">文件件物理路径</param>
             <returns>文件内容</returns>
        </member>
        <member name="M:Game.Utils.TextLogger.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path">文件物理路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TextLogger.GetFileList">
            <summary>
            获取日志目录下文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.TextLogger.SortDateTime">
            <summary>
            自定义日期类(实现倒排序)
            </summary>
        </member>
        <member name="F:Game.Utils.TextLogger.SortDateTime.dateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="M:Game.Utils.TextLogger.SortDateTime.#ctor(System.DateTime)">
            <summary>
            构造方法
            </summary>
            <param name="oneDateTime"></param>
        </member>
        <member name="M:Game.Utils.TextLogger.SortDateTime.CompareTo(System.Object)">
            <summary>
            重写比较方法
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.TextLoggerEntity">
            <summary>
            文本文件日志实体类
            </summary>
        </member>
        <member name="M:Game.Utils.TextLoggerEntity.#ctor(System.DateTime,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="logDateTime"></param>
            <param name="logContent"></param>
            <param name="logIp"></param>
            <param name="logErrorUrl"></param>
        </member>
        <member name="M:Game.Utils.TextLoggerEntity.CompareTo(System.Object)">
            <summary>
            重写比较类
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.TextLoggerEntity.LogDateTime">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:Game.Utils.TextLoggerEntity.LogContent">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:Game.Utils.TextLoggerEntity.LogIp">
            <summary>
            日志引发IP地址
            </summary>
        </member>
        <member name="P:Game.Utils.TextLoggerEntity.LogErrorUrl">
            <summary>
            日志引发Url
            </summary>
        </member>
        <member name="T:Game.Utils.ApplicationEnvironment">
            <summary>
            提供用于管理应用程序环境信息的方法类
            </summary>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.GetAssemblyFullName(System.Type)">
            <summary>
            获取给定类型(type)所在程序集的全名
            </summary>
            <param name="type">要返回全名的类型</param>
            <returns>返回这个类型所在的程序集全名</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.GetAssemblyVersion(System.Type)">
            <summary>
            获取给定类型(type)所在程序集版本号
            </summary>
            <param name="type">要确认的类型版本</param>
            <returns>返回这个类型所在的程序集版本号</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.GetInterfaceVersion(System.Type)">
            <summary>
            获取给定类型(type)所在程序集的版本对象
            </summary>
            <param name="type">要确认版本的类型</param>
            <returns>返回这个类型所在程序集的版本对象</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.GetInterfaceGuid(System.Type)">
            <summary>
            获取给定类型(type)的 GUID
            </summary>
            <param name="type">类型</param>
            <returns>返回这个类型的 GUID</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.InterfaceGuidCompare(System.Guid,System.Type)">
            <summary>
            比较两个接口对象的 GUID 版本
            </summary>
            <param name="queryGuid"></param>
            <param name="interfaceType"></param>
            <returns>相等则返回 true 不相等则返回 false</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.InterfaceVersionCompare(System.Version,System.Version)">
            <summary>
            比较两个接口对象的 Version 属性版本
            </summary>
            <param name="queryVer"></param>
            <param name="interfaceVer"></param>
            <returns>相等则返回 true 不相等则返回 false</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.GetAssemblyCopyright">
            <summary>
            获取缺省程序集的版权标识
            </summary>
            <returns>返回缺省程序集的版权标识</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.GetAssemblyProductName">
            <summary>
            获取缺省程序集的产品名称
            </summary>
            <returns>返回缺省程序集的产品名称</returns>
        </member>
        <member name="M:Game.Utils.ApplicationEnvironment.GetAssemblyVersion">
            <summary>
            获取缺省程序集的版本号码
            </summary>
            <returns>返回缺省程序集的版本号码</returns>
        </member>
        <member name="P:Game.Utils.ApplicationEnvironment.ApplicationName">
            <summary>
            获取应用程序名称 
            </summary>
        </member>
        <member name="T:Game.Utils.Caching3">
            <summary>
            使用树形结构来存储对象，有别于Hashtable的平板式结构
            通过 XPath 来进行对象获取
            </summary>
        </member>
        <member name="M:Game.Utils.Caching3.#ctor(Game.Utils.ICacheStrategy)">
            <summary>
            自适应缓存策略
            </summary>
        </member>
        <member name="M:Game.Utils.Caching3.Set(System.String,System.Object)">
            <summary>
            添加对象
            </summary>
            <param name="xpath">路径</param>
            <param name="obj">被缓存的对象</param>
        </member>
        <member name="M:Game.Utils.Caching3.Set(System.String,System.Object,System.DateTime)">
            <summary>
            添加对象
            </summary>
            <param name="xpath">路径</param>
            <param name="obj">被缓存的对象</param>
            <param name="expiresAt">过期时间</param>
        </member>
        <member name="M:Game.Utils.Caching3.Get(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching3.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching3.GetList(System.String)">
            <summary>
            获取一组对象
            </summary>
            <param name="xpath">组结点</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching3.GetList``1(System.String)">
            <summary>
            获取一组对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xpath">组结点</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching3.Remove(System.String)">
            <summary>
            根据 XPath 删除对象
            </summary>
            <param name="xpath">对象保存路径</param>
        </member>
        <member name="M:Game.Utils.Caching3.CreateNode(System.String)">
            <summary>
            根据 XPath 创建一个结点
            </summary>
            <param name="xpath">路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching3.PrepareXpath(System.String)">
            <summary>
            构建 XPath，使其以 /Cache 为根结点，并清除多于的"/"字符
            </summary>
            <param name="xpath">路径</param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.XmlConvertor">
            <summary>
            XML 到对象的转换，对序列化对象有效
            </summary>
        </member>
        <member name="M:Game.Utils.XmlConvertor.ObjectToXml(System.Object,System.Boolean)">
            <summary>
            对象转xml
            </summary>
            <param name="obj"></param>
            <param name="toBeIndented">是否格式化</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlConvertor.XmlToObject(System.String,System.Type)">
            <summary>
            xml转对象
            </summary>
            <param name="xml"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.CtrlHelper">
            <summary>
            控件辅助
            </summary>
        </member>
        <member name="M:Game.Utils.CtrlHelper.GetSelectValue(System.Web.UI.WebControls.DropDownList)">
            <summary>
            获取下拉列表值
            </summary>
            <param name="ddlList"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CtrlHelper.GetSelectValue(System.Web.UI.WebControls.DropDownList,System.Byte)">
            <summary>
            获取下拉列表值
            </summary>
            <param name="ddlList"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CtrlHelper.GetCheckBoxValue(System.Web.UI.WebControls.CheckBox)">
            <summary>
            获取复选框选中值 byte
            </summary>
            <param name="chk"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CtrlHelper.SetCheckBoxValue(System.Web.UI.WebControls.CheckBox,System.Byte)">
            <summary>
            设置复选框值
            </summary>
            <param name="chk"></param>
            <param name="val"></param>
        </member>
        <member name="M:Game.Utils.CtrlHelper.GetText(System.Web.UI.ITextControl)">
            <summary>
            获取控件文本内容
            </summary>
            <param name="textCtrl"></param>
        </member>
        <member name="M:Game.Utils.CtrlHelper.SetText(System.Web.UI.ITextControl,System.String)">
            <summary>
            为文本控件赋值
            </summary>
            <param name="textCtrl"></param>
            <param name="text"></param>
        </member>
        <member name="M:Game.Utils.CtrlHelper.SetText(System.Web.UI.WebControls.TextBox,System.String)">
            <summary>
            为文本控件赋值
            </summary>
            <param name="textCtrl"></param>
            <param name="text"></param>
        </member>
        <member name="M:Game.Utils.CtrlHelper.GetText(System.Web.UI.HtmlControls.HtmlInputControl)">
            <summary>
            获取控件文本内容
            </summary>
            <param name="valueCtrl"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CtrlHelper.SetText(System.Web.UI.HtmlControls.HtmlInputControl,System.String)">
            <summary>
            为文本控件赋值
            </summary>
            <param name="valueCtrl"></param>
            <param name="text"></param>
        </member>
        <member name="M:Game.Utils.CtrlHelper.GetText(System.Web.UI.WebControls.HiddenField)">
            <summary>
            获取控件文本内容
            </summary>
            <param name="hiddenCtrl"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CtrlHelper.SetText(System.Web.UI.WebControls.HiddenField,System.String)">
            <summary>
            为文本控件赋值
            </summary>
            <param name="hiddenCtrl"></param>
            <param name="text"></param>
        </member>
        <member name="M:Game.Utils.CtrlHelper.GetInt(System.Web.UI.Control,System.Int32)">
            <summary>
            获取控件 Int 参数值,ctrl 必须是文本控件
            </summary>
            <param name="ctrl"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.MessageRender">
            <summary>
            内容呈现
            </summary>
        </member>
        <member name="M:Game.Utils.MessageRender.#ctor">
            <summary>
            初始化内容呈现
            </summary>
        </member>
        <member name="M:Game.Utils.MessageRender.RegisterVariable(System.String,System.String)">
            <summary>
            注册替换键值
            </summary>
            <param name="varName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Game.Utils.MessageRender.Render(System.String)">
            <summary>
            内容呈现
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.MessageRender.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.Caching2">
            <summary>
            使用树形结构来存储对象，有别于Hashtable的平板式结构
            通过 XPath 来进行对象获取
            </summary>
        </member>
        <member name="F:Game.Utils.Caching2.Instance">
            <summary>
            返回 Caching2 的实例
            </summary>
        </member>
        <member name="M:Game.Utils.Caching2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.Caching2.Set(System.String,System.Object)">
            <summary>
            添加对象
            </summary>
            <param name="xpath">路径</param>
            <param name="obj">被缓存的对象</param>
        </member>
        <member name="M:Game.Utils.Caching2.Get(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching2.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching2.GetList(System.String)">
            <summary>
            获取一组对象
            </summary>
            <param name="xpath">组结点</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching2.Remove(System.String)">
            <summary>
            根据 XPath 删除对象
            </summary>
            <param name="xpath">对象保存路径</param>
        </member>
        <member name="M:Game.Utils.Caching2.CreateNode(System.String)">
            <summary>
            根据 XPath 创建一个结点
            </summary>
            <param name="xpath">路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Caching2.PrepareXpath(System.String)">
            <summary>
            构建 XPath，使其以 /Cache 为根结点，并清除多于的"/"字符
            </summary>
            <param name="xpath">路径</param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.Validate">
            <summary>
            验证数字、日期、身份证号码等等
            </summary>
        </member>
        <member name="M:Game.Utils.Validate.IsNumeric(System.Object)">
            <summary>
            判断给定的字符串(expression)是否是数值型
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsNumericArray(System.String[])">
            <summary>
            判断给定的字符串数组(expression)中的数据是不是都为数值型
            </summary>
            <param name="strNumber">要确认的字符串数组</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsDouble(System.Object)">
            <summary>
            判断给定的字符串(expression)是否是 double 类型
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsDecimalFraction(System.String)">
            <summary>
            判断给定的字符串(expression)是否是小数格式
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsNegativeInt(System.String)">
            <summary>
            判断给定的字符串(expression)是否是负整数(32位)
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsPositiveInt(System.String)">
            <summary>
            判断给定的字符串(expression)是否是正整数(32位)
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsPositiveInt64(System.String)">
            <summary>
            判断给定的字符串(expression)是否是正整数(64位)
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsDate(System.String)">
            <summary>
            判断给定的字符串(dateval)是不是合法的日期,(yyyy-mm-dd)
            </summary>
            <param name="dateval">要确认的字符串</param>
            <returns>是 返回 true, 不是 返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsShortDate(System.String)">
            <summary>
            判断给定的字符串(dateval)是不是合法的日期,(yyyy-mm-dd)
            </summary>
            <param name="dateval">要确认的字符串</param>
            <returns>是 返回 true, 不是 返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsLongDate(System.String)">
            <summary>
            判断给定的字符串(dateval)是不是合法的日期,(yyyy-MM-dd HH:mm:ss)
            </summary>
            <param name="dateval">要确认的字符串</param>
            <returns>是 返回 true, 不是 返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsTime(System.String)">
            <summary>
            判断给定的字符串(dateval)是不是合法的时间,(HH:MM:ss)
            </summary>
            <param name="timeval">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsIP(System.String)">
            <summary>
            判断给定的字符串(ipval)是不是合法的IP地址,(127.0.0.1)
            </summary>
            <param name="ipval">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsIPSect(System.String)">
            <summary>
            判断给定的字符串(ipval)是不是合法的IP地址,(127.0.0.1)
            </summary>
            <param name="ipval">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsIPAndPort(System.String)">
            <summary>
            判断给定的字符串(ipval)是不是合法的IP地址+端口号码(127.0.0.1,1688)
            </summary>
            <param name="ipval">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsWordAndNum(System.String)">
            <summary>
            判断给定的字符串(expression)是否是数字和字母组合
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsSpecifyWordAndNum(System.String,System.Int32,System.Int32)">
            <summary>
            判断给定的字符串(expression),从位置start到end之间的字符串是否是数字和字母组合
            </summary>
            <param name="expression">要确认的字符串</param>
            <param name="start">起始位置</param>
            <param name="end">结束位置</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsCnChar(System.String)">
            <summary>
            判断给定的字符串(expression)是否是汉字字符
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsCnCharAndWordAndNum(System.String)">
            <summary>
            判断给定的字符串(expression)是否是汉字,数字和英文字母组合
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
            <remarks>除特殊字符外的、数字、英文字母和汉字组合</remarks>
        </member>
        <member name="M:Game.Utils.Validate.IsNickName(System.String)">
            <summary>
            是否昵称
            </summary>
            <param name="strVal"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Validate.IsUserName(System.String)">
            <summary>
            是否用户名
            </summary>
            <param name="strVal"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Validate.IsEmail(System.String)">
            <summary>
            判断给定的字符串(strEmail)是否是有效的 email 地址
            </summary>
            <param name="strEmail">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsDoEmail(System.String)">
            <summary>
            判断给定的字符串(strEmail)是否是有效的 email 地址
            </summary>
            <param name="strEmail">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsURL(System.String)">
            <summary>
            判断给定的字符串(strUrl)是否是有效的 url 地址
            </summary>
            <param name="strUrl">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsDomain(System.String)">
            <summary>
            判断域名
            </summary>
            <param name="strHost"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Validate.IsMobileCode(System.String)">
            <summary>
            判断给定的字符串(strMobile)是否是手机号码
            </summary>
            <param name="strMobile">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsPhoneCode(System.String)">
            <summary>
            判断给定的字符串(strPhone)是否是电话号码
            </summary>
            <param name="strPhone">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsPostalCode(System.String)">
            <summary>
            判断给定的字符串(strPostalCode)是否是邮政编码
            </summary>
            <param name="strPostalCode"></param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsIDCard(System.String)">
            <summary>
            判断给定的字符串(strIDCard)是否是身份证号码
            </summary>
            <param name="strIDCard"></param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsSafeInputWords(System.String)">
            <summary>
            判断给定的字符串(expression)是否是安全的输入字串,危险的可能用于链接的字符串
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsBase64String(System.String)">
            <summary>
            判断是否是base64字符串
            </summary>
            <param name="expression">要确认的字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsSafeSqlString(System.String)">
            <summary>
            判断是否有SQL危险字符
            </summary>
            <param name="expression">要判断字符串</param>
            <returns>是则返回true 不是则返回false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsSafety(System.String)">
            <summary>
            判断字符串是否存在操作数据库的安全隐患
            </summary>
        </member>
        <member name="M:Game.Utils.Validate.IsSQL(System.String)">
            <summary>
            判断是否包含 SQL 语句
            </summary>
            <param name="sqlExpression">要确认的字符串</param>
            <returns>是则返回 true,否则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsImage(System.String)">
            <summary>
            判断文件名是否为浏览器可以直接显示的图片文件名(jpg,jpeg,png,bmp,gif)
            </summary>
            <param name="filename">图片文件名</param>
            <returns>是则返回 true,否则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsNull(System.Object)">
            <summary>
            判断字符串或数组是否为空（null 或是""）
            </summary>
            <param name="expVal">字符串对象数组</param>
            <returns>空返回 true； 否则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.IsNotNull(System.Object)">
            <summary>
            判断字符串或数组是否为非空（null 或是""）
            </summary>
            <param name="expVal">字符串对象数组</param>
            <returns>非空返回 true；否则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.CheckedDataTable(System.Data.DataTable)">
            <summary>
            判断 DataTable 是否有效， 为 null 或 Rows.Counts 为 0均为无效
            </summary>
            <param name="dt">要检测的 DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Validate.CheckedDataSet(System.Data.DataSet)">
            <summary>
            检测 DataSet 数据集是否为空;非空 返回 true; 为空 返回 false
            </summary>
            <param name="ds"></param>
            <returns>非空 返回 true; 为空 返回 false</returns>
        </member>
        <member name="M:Game.Utils.Validate.CheckedObjcetArray(System.Object[])">
            <summary>
            判断 objce[] 是否有效， 为null 或 Len为0, 或obj[0]为null均为无效
            </summary>
            <param name="obj">对象数组。 </param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Validate.IsPhysicalPath(System.String)">
            <summary>
            判断是否为绝对地址（物理地址）
            </summary>
        </member>
        <member name="M:Game.Utils.Validate.IsFileName(System.String)">
            <summary>
            判断是否是正确的文件名,未实现
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Validate.IsRelativePath(System.String)">
            <summary>
            判断是否为相对地址（虚拟地址）
            </summary>
        </member>
        <member name="M:Game.Utils.Validate.IsUnicode(System.String)">
            <summary>
            判断是否为Unicode码
            </summary>
        </member>
        <member name="T:Game.Utils.Utility">
            <summary>
            工具类,对常用方法重新进行封装，及获取一些常用环境变量
            </summary>
        </member>
        <member name="F:Game.Utils.Utility.ASSEMBLY_VERSION">
            <summary>
            程序集版本
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.Url2HyperLink(System.String)">
            <summary>
            把内容中的 [http:// ] 内容片段添加成可以点击的链接
            </summary>
            <param name="text">文本内容</param>
            <returns>返回转换后的文本内容</returns>
        </member>
        <member name="M:Game.Utils.Utility.Redirect(System.String)">
            <summary>
            页面跳转
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Game.Utils.Utility.UrlEncode(System.String)">
            <summary>
            URL编码
            </summary>
            <param name="str">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.UrlDecode(System.String)">
            <summary>
            URL解码
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.escape(System.String)">
            <summary>
            返回一个可在所有计算机上读取的编码 String 对象 
            </summary>
            <param name="str">要编码的任何 String 对象或文本</param>
            <returns>编码结果</returns>
            <remarks>escape 方法返回一个包含 charstring 内容的字符串值（Unicode 格式）。
            所有空格、标点、重音符号以及任何其他非 ASCII 字符都用 %xx 编码替换，
            其中 xx 等于表示该字符的十六进制数。例如，空格返回为“%20”。
            字符值大于 255 的字符以 %uxxxx 格式存储。
            </remarks>        
        </member>
        <member name="M:Game.Utils.Utility.unescape(System.String)">
            <summary>
            解码 String
            </summary>
            <param name="str"></param>
            <returns>解码结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.HtmlDecode(System.String)">
            <summary>
            HTML解码
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.HtmlEncode(System.String)">
            <summary>
            HTML编码
            </summary>
            <param name="str">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.GetHostName">
            <summary>
            取机器名 
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.GetCpuID">
            <summary>
            取CPU编号
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.GetHardDiskID">
            <summary>
            取第一块硬盘编号
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.GetMACAddress">
            <summary> 
            获取网卡物理地址 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Game.Utils.Utility.GetOSVersion">
            <summary>
            获取操作系统版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.GetMachineSerial">
            <summary>
            获取机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.GetLocalIPAndMac">
            <summary>
            获取 IP 地址信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.GetIPAddressByMac(System.String)">
            <summary>
            根据物理地址获取 IP 地址
            </summary>
            <param name="macAddress">物理地址</param>
            <returns>IP 地址</returns>
        </member>
        <member name="M:Game.Utils.Utility.GetMACByIPAddress(System.String)">
            <summary>
            根据 IP 地址获取物理地址
            </summary>
            <param name="ipAddress">IP 地址</param>
            <returns>物理地址</returns>
        </member>
        <member name="M:Game.Utils.Utility.IP2Int(System.String)">
            <summary>
            IP 地址字符串形式转换成长整型
            </summary>
            <param name="ip"></param>
            <returns>网络字节顺序的长整型</returns>
        </member>
        <member name="M:Game.Utils.Utility.Int2IP(System.Int64)">
            <summary>
            长整型转换成IP地址字符串形式
            </summary>
            <param name="ipNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.GetAppSetting(System.String)">
            <summary>
            读取 Web.Config 配置文件节点
            </summary>
            <param name="key">键值名称</param>
            <returns>与键名称对应的值</returns>
        </member>
        <member name="M:Game.Utils.Utility.GetAssemblyCopyright">
            <summary>
            获取程序集版权标识
            </summary>
            <returns>返回程序集版权标识</returns>
        </member>
        <member name="M:Game.Utils.Utility.GetAssemblyProductName">
            <summary>
            获取程序集产品名称
            </summary>
            <returns>返回程序集产品名称</returns>
        </member>
        <member name="M:Game.Utils.Utility.GetAssemblyVersion">
            <summary>
            获取程序集版本号
            </summary>
            <returns>返回程序集版本号</returns>
        </member>
        <member name="M:Game.Utils.Utility.IsUTF8(System.IO.FileStream)">
            <summary>
            是否为 UTF8 编码
            </summary>
            <param name="sbInputStream">文件输入流</param>
            <returns>是返回 true,否则 false</returns>
        </member>
        <member name="M:Game.Utils.Utility.SearchUTF8File(System.String)">
            <summary>
            查找非 UTF8 编码的文件
            </summary>
            <param name="directory">文件目录</param>
            <returns>文件名集合</returns>
        </member>
        <member name="M:Game.Utils.Utility.ClearPageClientCache">
            <summary>
            清空客户端浏览器的缓存,设置页面不被缓存
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.SetPageNoCache">
            <summary>
            设置页面不被缓存
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.ResponseFile(System.String,System.String,System.String)">
            <summary>
            以指定的ContentType输出指定文件
            </summary>
            <param name="filepath">文件路径</param>
            <param name="filename">输出的文件名</param>
            <param name="filetype">将文件输出时设置的ContentType</param>
        </member>
        <member name="M:Game.Utils.Utility.Aspx2XHtml(System.String,System.String)">
            <summary>
            把动态页面转换成静态页面并输出
            </summary>
            <param name="path">动态页面输入路径</param>
            <param name="outPath">静态页面输出路径</param>
        </member>
        <member name="M:Game.Utils.Utility.WriteCookie(System.String,System.String)">
            <summary>
            写 Cookies
            </summary>
            <param name="strName">Cookie 健名称</param>
            <param name="strValue">Cookie 值名称</param>
        </member>
        <member name="M:Game.Utils.Utility.WriteCookie(System.String,System.String,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="key">键值</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:Game.Utils.Utility.WriteCookie(System.String,System.String,System.Int32)">
            <summary>
            写 Cookies
            </summary>
            <param name="strName">Cookie 健名称</param>
            <param name="strValue">Cookie 值名称</param>
            <param name="expires">过期时间(分钟)</param>
        </member>
        <member name="M:Game.Utils.Utility.GetCookie(System.String)">
            <summary>
            获取客户端发送的 Cookie 变量值
            </summary>
            <param name="strName">Cookie 名称</param>
            <returns>返回 Cookie 值</returns>
        </member>
        <member name="M:Game.Utils.Utility.GetCookie(System.String,System.String)">
            <summary>
            读cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="key"></param>
            <returns>cookie值</returns>
        </member>
        <member name="M:Game.Utils.Utility.Trace(System.Object)">
            <summary>
            跟踪调试输出一个对象
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.TraceWhite(System.Object)">
            <summary>
            跟踪调试输出一个对象,不加修饰
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.GenerateToken(System.String)">
            <summary>
            以 32 位 MD5 加密加CookieToken后缀的形式产生 cookie 密文
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.MD5(System.String)">
            <summary>
            32 位 MD5 加密 
            </summary>
        </member>
        <member name="M:Game.Utils.Utility.StrToBool(System.Object,System.Boolean)">
            <summary>
            object型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.StrToBool(System.String,System.Boolean)">
            <summary>
            string型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.StrToInt(System.Object,System.Int32)">
            <summary>
            将对象转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.StrToInt(System.String,System.Int32)">
            <summary>
            将字符串转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.StrToFloat(System.Object,System.Single)">
            <summary>
            Object型转换为float型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.StrToFloat(System.String,System.Single)">
            <summary>
            string型转换为float型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Game.Utils.Utility.IsNumericArray(System.String[])">
            <summary>
            判断给定的字符串数组(strNumber)中的数据是不是都为数值型
            </summary>
            <param name="strNumber">要确认的字符串数组</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:Game.Utils.Utility.GetTextFromHTML(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img
            </summary>
            <param name="HTML"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.SendDataLaunch``1(``0,System.String)">
            <summary>
            发送数据处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="cipherKey"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.ReceiveDataLaunch(System.Byte[],System.String)">
            <summary>
            接收数据处理
            </summary>
            <param name="cipHerBuffer"></param>
            <param name="cipherKey"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.ToColor(System.String)">
            <summary>
            将字符串转换为Color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.DataTableToJSON(System.Data.DataTable)">
            <summary>
            将数据表转换成JSON类型串
            </summary>
            <param name="dt">要转换的数据表</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.DataTableToJson(System.Data.DataTable,System.Boolean)">
            <summary>
            将数据表转换成JSON类型串
            </summary>
            <param name="dt">要转换的数据表</param>
            <param name="dtDispose">数据表转换结束后是否dispose掉</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.ConvetVersionInt2Str(System.Int32)">
            <summary>
            数字转字符型版本
            </summary>
            <param name="dwVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Utility.ConvertVersionStr2Int(System.String)">
            <summary>
            字符转数字版本
            </summary>
            <param name="strVersion"></param>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.Utility.GetIPDbFilePath">
            <summary>
            IP 数据库路径
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.GetAppLogDirectory">
            <summary>
            获得日志文件存放目录
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.GetWriteAppLog">
            <summary>
            获取是否记录Web应用程序日志,默认(false)
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.ServerDomain">
            <summary>
            获得网站域名
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.UserBrowser">
            <summary>
            获取访问者所使用的浏览器名
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.UserIP">
            <summary>
            获取客户端IP 
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.CurrentPath">
            <summary>
            获得当前路径
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.CurrentUrl">
            <summary> 
            获得当前URL
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.RawUrl">
            <summary>
            获取当前请求的原始 URL
            </summary>
        </member>
        <member name="P:Game.Utils.Utility.Referrer">
            <summary>
            获得来源URL
            </summary>
        </member>
        <member name="T:Game.Utils.LocalIPAndMac">
            <summary>
            本机IP和MAC地址
            </summary>
        </member>
        <member name="M:Game.Utils.LocalIPAndMac.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.LocalIPAndMac.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="mac"></param>
        </member>
        <member name="P:Game.Utils.LocalIPAndMac.MACAddress">
            <summary>
            物理地址
            </summary>
        </member>
        <member name="P:Game.Utils.LocalIPAndMac.IPAddress">
            <summary>
            IP 地址
            </summary>
        </member>
        <member name="T:Game.Utils.DataSetSerialization">
            <summary>
            提供 DataSet 本地二进制序列化
            </summary>
        </member>
        <member name="M:Game.Utils.DataSetSerialization.Load(System.String)">
            <summary>
            加载需要反序列化的文件，并返回反序列化后的对象
            </summary>
            <param name="filename">文件名</param>
            <returns>返回反序列化后的对象</returns>
        </member>
        <member name="M:Game.Utils.DataSetSerialization.Save(System.Data.DataSet,System.String)">
            <summary>
            把 DataSet 压缩二进制对象作为文件，输出保存
            </summary>
            <param name="serialDataSet">需要序列化的 DataSet 对象</param>
            <param name="filename">输出的文件名</param>
        </member>
        <member name="T:Game.Utils.PropertyNotFoundException">
            <summary>
            属性未找到异常
            </summary>
        </member>
        <member name="M:Game.Utils.PropertyNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.PropertyNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Game.Utils.PropertyNotFoundException.TargetPropertyName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Game.Utils.CompressHelper">
            <summary>
            数据压缩助手
            </summary>
        </member>
        <member name="M:Game.Utils.CompressHelper.DeflateCompress(System.Byte[])">
            <summary>
            压缩数据
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CompressHelper.DeflateDecompress(System.Byte[])">
            <summary>
            解压数据
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CompressHelper.ReadStreamToBytes(System.IO.Stream)">
            <summary>
            输入流到字节数组的转换
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.XmlHelper">
            <summary>
            xml助手
            </summary>
        </member>
        <member name="M:Game.Utils.XmlHelper.LoadObjectFromXml(System.String,System.Type)">
            <summary>
            从xml文件中加载对象
            </summary>
            <param name="path"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlHelper.SaveObjectToXml(System.String,System.Object)">
            <summary>
            保存对象
            </summary>
            <param name="path"></param>
            <param name="obj"></param>
        </member>
        <member name="T:Game.Utils.WebUtility">
            <summary>
            基于System.Web的拓展类
            </summary>
        </member>
        <member name="M:Game.Utils.WebUtility.ValidateUri(System.String)">
            <summary>
            检测指定的 Uri 是否有效
            </summary>
            <param name="url">指定的Url地址</param>
            <returns>bool</returns>
        </member>
        <member name="M:Game.Utils.WebUtility.DownloadFile(System.String,System.String,System.Int64)">
            <summary>
            输出硬盘文件，提供下载 支持大文件、续传、速度限制、资源占用小。
            </summary>
            <param name="_fileName">下载文件名。</param>
            <param name="_fullPath">带文件名下载路径。</param>
            <param name="_speed">每秒允许下载的字节数。</param>
            <returns>返回是否成功。</returns>
        </member>
        <member name="M:Game.Utils.WebUtility.Download(System.String,System.String)">
            <summary>
            下载服务器上的文件（适用于非WEB路径下，且是大文件，该方法在IE中不会显示下载进度）
            </summary>
            <param name="path">下载文件的绝对路径</param>
            <param name="saveName">保存的文件名，包括后缀符</param>
        </member>
        <member name="M:Game.Utils.WebUtility.DownloadFile(System.String,System.String)">
            <summary>
            下载服务器上的文件（适用于非WEB路径下，且是大文件，该方法在IE中会显示下载进度）。
            </summary>
            <param name="path">下载文件的绝对路径</param>
            <param name="saveName">保存的文件名，包括后缀符</param>
        </member>
        <member name="M:Game.Utils.WebUtility.LoadURLString(System.String)">
            <summary>
            从指定的URL下载页面内容(使用WebRequest)
            </summary>
            <param name="url">指定URL</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.WebUtility.LoadPageContent(System.String)">
            <summary>
            从指定的URL下载页面内容(使用WebClient)
            </summary>
            <param name="url">指定URL</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.WebUtility.RemoteGetFile(System.String,System.String)">
            <summary>
            远程提取文件保存至服务器上(使用WebRequest)。
            </summary>
            <param name="url">一个URI上的文件。</param>
            <param name="saveurl">文件保存在服务器上的全路径。</param>
        </member>
        <member name="M:Game.Utils.WebUtility.WebClientGetFile(System.String,System.String)">
            <summary>
            远程提取一个文件保存至服务器上(使用WebClient)
            </summary>
            <param name="url">一个URI上的文件</param>
            <param name="saveurl">保存文件</param>
        </member>
        <member name="M:Game.Utils.WebUtility.WebClientGetFile(System.String[],System.String[])">
            <summary>
            远程提取一组文件保存至服务器上(使用WebClient)
            </summary>
            <param name="urls">一组URI上的文件</param>
            <param name="saveurls">保存文件</param>
        </member>
        <member name="M:Game.Utils.WebUtility.UploadFile(System.Web.HttpPostedFile,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="upfile">获取客户段上传的文件</param>
            <param name="limitType">允许上传的文件类型，null值为无限制</param>
            <param name="limitSize">上传文件的大小限制(0为无限制)</param>
            <param name="autoName">是否自动命名</param>
            <param name="autoFilename"></param>
            <param name="savepath">上传文件的保存路径</param>
            <returns>string[]</returns>
        </member>
        <member name="T:Game.Utils.SysMailMessage">
            <summary>
            邮件发送
            </summary>
        </member>
        <member name="M:Game.Utils.SysMailMessage.#ctor">
            <summary>
            初始化邮件发送
            </summary>
        </member>
        <member name="M:Game.Utils.SysMailMessage.AddRecipient(System.String[])">
            <summary>
            收件人的邮箱地址
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.SysMailMessage.Base64Encode(System.String)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
            <param name="str">要编码的字符串</param>
        </member>
        <member name="M:Game.Utils.SysMailMessage.Send">
            <summary>
            发送
            </summary>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.SysMailMessage.Subject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.Body">
            <summary>
            邮件正文
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.FromName">
            <summary>
            发件人姓名
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.RecipientName">
            <summary>
            收件人姓名
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.MailDomain">
            <summary>
            邮箱域
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.MailDomainPort">
            <summary>
            邮件服务器端口号
            </summary>	
        </member>
        <member name="P:Game.Utils.SysMailMessage.MailServerUserName">
            <summary>
            SMTP认证时使用的用户名
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.MailServerPassWord">
            <summary>
            SMTP认证时使用的密码
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.Html">
            <summary>
             是否Html邮件
            </summary>
        </member>
        <member name="P:Game.Utils.SysMailMessage.IsAsync">
            <summary>
            是否异步发送
            </summary>
        </member>
        <member name="T:Game.Utils.TypeHelper">
            <summary>
            类型辅助类
            </summary>
        </member>
        <member name="M:Game.Utils.TypeHelper.ChangeType(System.Type,System.Object)">
            <summary>
            调整对象类型
            </summary>
            <param name="targetType"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.IsFixLength(System.Type)">
            <summary>
            是否固定长度
            </summary>
            <param name="destDataType"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.IsNumbericType(System.Type)">
            <summary>
            是否数值类型
            </summary>
            <param name="destDataType"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.IsSimpleType(System.Type)">
            <summary>
            是否简单类型
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.GetClassSimpleName(System.Type)">
            <summary>
            获取类型名字
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.GetDefaultValue(System.Type)">
            <summary>
            获取类型的默认值
            </summary>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.GetTypeByRegularName(System.String)">
            <summary>
            从规则的名字获取类型
            </summary>
            <param name="regularName"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.GetTypeRegularName(System.Type)">
            <summary>
            获取类型规则的名字
            </summary>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.TypeHelper.GetTypeRegularNameOf(System.Object)">
            <summary>
            获取类型规则的名字
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.Semaphore">
            <summary>Implementation of Dijkstra's PV Semaphore based on the Monitor class.</summary>
        </member>
        <member name="F:Game.Utils.Semaphore._count">
            <summary>The number of units alloted by this semaphore.</summary>
        </member>
        <member name="F:Game.Utils.Semaphore._semLock">
            <summary>Lock for the semaphore.</summary>
        </member>
        <member name="M:Game.Utils.Semaphore.#ctor">
            <summary> Initialize the semaphore as a binary semaphore.</summary>
        </member>
        <member name="M:Game.Utils.Semaphore.#ctor(System.Int32)">
            <summary> Initialize the semaphore as a counting semaphore.</summary>
            <param name="count">Initial number of threads that can take out units from this semaphore.</param>
            <exception cref="T:System.ArgumentException">Throws if the count argument is less than 0.</exception>
        </member>
        <member name="M:Game.Utils.Semaphore.AddOne">
            <summary>V the semaphore (add 1 unit to it).</summary>
        </member>
        <member name="M:Game.Utils.Semaphore.WaitOne">
            <summary>P the semaphore (take out 1 unit from it).</summary>
        </member>
        <member name="M:Game.Utils.Semaphore.P">
            <summary>P the semaphore (take out 1 unit from it).</summary>
        </member>
        <member name="M:Game.Utils.Semaphore.V">
            <summary>V the semaphore (add 1 unit to it).</summary>
        </member>
        <member name="M:Game.Utils.Semaphore.Reset(System.Int32)">
            <summary>Resets the semaphore to the specified count.  Should be used cautiously.</summary>
        </member>
        <member name="T:Game.Utils.ManagedThreadPool">
            <summary>Managed thread pool.</summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool._maxWorkerThreads">
            <summary>Maximum number of threads the thread pool has at its disposal.</summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool._waitingCallbacks">
            <summary>Queue of all the callbacks waiting to be executed.</summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool._workerThreadNeeded">
            <summary>
            Used to signal that a worker thread is needed for processing.  Note that multiple
            threads may be needed simultaneously and as such we use a semaphore instead of
            an auto reset event.
            </summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool._workerThreads">
            <summary>List of all worker threads at the disposal of the thread pool.</summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool._inUseThreads">
            <summary>Number of threads currently active.</summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool._poolLock">
            <summary>Lockable object for the pool.</summary>
        </member>
        <member name="M:Game.Utils.ManagedThreadPool.#cctor">
            <summary>Initialize the thread pool.</summary>
        </member>
        <member name="M:Game.Utils.ManagedThreadPool.Initialize">
            <summary>Initializes the thread pool.</summary>
        </member>
        <member name="M:Game.Utils.ManagedThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
        </member>
        <member name="M:Game.Utils.ManagedThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>Queues a user work item to the thread pool.</summary>
            <param name="callback">
            A WaitCallback representing the delegate to invoke when the thread in the 
            thread pool picks up the work item.
            </param>
            <param name="state">
            The object that is passed to the delegate when serviced from the thread pool.
            </param>
        </member>
        <member name="M:Game.Utils.ManagedThreadPool.Reset">
            <summary>Empties the work queue of any queued work items.  Resets all threads in the pool.</summary>
        </member>
        <member name="M:Game.Utils.ManagedThreadPool.ProcessQueuedItems">
            <summary>
            A thread worker function that processes items from the work queue.
            </summary>
        </member>
        <member name="P:Game.Utils.ManagedThreadPool.MaxThreads">
            <summary>Gets the number of threads at the disposal of the thread pool.</summary>
        </member>
        <member name="P:Game.Utils.ManagedThreadPool.ActiveThreads">
            <summary>Gets the number of currently active threads in the thread pool.</summary>
        </member>
        <member name="P:Game.Utils.ManagedThreadPool.WaitingCallbacks">
            <summary>Gets the number of callback delegates currently waiting in the thread pool.</summary>
        </member>
        <member name="T:Game.Utils.ManagedThreadPool.WaitingCallback">
            <summary>Used to hold a callback delegate and the state for that delegate.</summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool.WaitingCallback._callback">
            <summary>Callback delegate for the callback.</summary>
        </member>
        <member name="F:Game.Utils.ManagedThreadPool.WaitingCallback._state">
            <summary>State with which to call the callback delegate.</summary>
        </member>
        <member name="M:Game.Utils.ManagedThreadPool.WaitingCallback.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>Initialize the callback holding object.</summary>
            <param name="callback">Callback delegate for the callback.</param>
            <param name="state">State with which to call the callback delegate.</param>
        </member>
        <member name="P:Game.Utils.ManagedThreadPool.WaitingCallback.Callback">
            <summary>Gets the callback delegate for the callback.</summary>
        </member>
        <member name="P:Game.Utils.ManagedThreadPool.WaitingCallback.State">
            <summary>Gets the state with which to call the callback delegate.</summary>
        </member>
        <member name="T:Game.Utils.ApplicationSettings">
            <summary>
             对ConfigurationSettings.AppSettings操作进行封装
             </summary>
        </member>
        <member name="M:Game.Utils.ApplicationSettings.Get(System.String)">
            <summary>
            获取web.config的配置项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.SessionState">
            <summary>
            对Session操作进行封装
            </summary>
        </member>
        <member name="M:Game.Utils.SessionState.Get(System.String)">
            <summary>
            从 Session 读取 键为 name 的值
            </summary>
        </member>
        <member name="M:Game.Utils.SessionState.Set(System.String,System.Object)">
            <summary>
            向 Session 保存 键为 name 的， 值为 value
            </summary>
        </member>
        <member name="M:Game.Utils.SessionState.Remove(System.String)">
            <summary>
            从 Session 删除 键为 name session 项
            </summary>
        </member>
        <member name="M:Game.Utils.SessionState.RemoveAll">
            <summary>
            删除所有 session 项
            </summary>
        </member>
        <member name="T:Game.Utils.DataSetCompression">
            <summary>
            提供 DataSet 压缩
            </summary>
        </member>
        <member name="M:Game.Utils.DataSetCompression.CompressDataSet(System.Data.DataSet)">
            <summary>
            压缩 DataSet
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataSetCompression.DecompressDataSet(System.Byte[],System.Int32@)">
            <summary>
            还原 DataSet
            </summary>
            <param name="bytDs"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataSetCompression.ReadFullStream(System.IO.Stream)">
            <summary>
            字节流读取
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.Singleton`1">
            <summary>
            Singleton 单件泛型类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Game.Utils.Singleton`1.GetInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.Singleton`1.SetInstance(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Game.Utils.XmlOperate">
            <summary>
            XmlOperate : 对 Xml 文件的操作。
            </summary>
            <remarks>
             xPath说明
            /* 
             * 查询属性：	(//sectionName[@propertyName=value])
             * 查询子节点：	(//sectionName[childSectionName=value])
             * 逐层查询：	(//root/sectionName/child....)
             */
            </remarks>
        </member>
        <member name="M:Game.Utils.XmlOperate.#ctor">
            <summary>
            公共的构造函数
            </summary>
        </member>
        <member name="M:Game.Utils.XmlOperate.#ctor(System.String)">
            <summary>
            公共构造函数
            </summary>
            <param name="Path">Xml文件的绝对路径</param>
        </member>
        <member name="M:Game.Utils.XmlOperate.CreateXml">
            <summary>
            新建一个空白的XML格式的文件(无根节点)
            </summary>
        </member>
        <member name="M:Game.Utils.XmlOperate.CreateXml(System.String)">
            <summary>
            新建一个XML格式的文件(具有根节点)
            </summary>
            <param name="rootNodeName">根节点名称</param>
        </member>
        <member name="M:Game.Utils.XmlOperate.CreateNode(System.String,System.Data.DataTable)">
            <summary>
            创建一个子节点到指定的节点下，并为该子节点指定属性或子节点
            </summary>
            <param name="nodeName">要创建的子节点名称</param>
            <param name="dt">
            储存子节点的赋值信息(一个DataTable)
            行1(名称, 名称前含有@字符，则为属性)
            行2(值)</param>
        </member>
        <member name="M:Game.Utils.XmlOperate.CreateNodes(System.String,System.Data.DataTable)">
            <summary>
            创建一个子节点到指定的节点下，并为该子节点指定属性或子节点，空值也创建
            </summary>
            <param name="nodeName">要创建的子节点名称</param>
            <param name="dt">
            储存子节点的赋值信息(一个DataTable)
            行1(名称, 名称前含有@字符，则为属性)
            行2(值)</param>
        </member>
        <member name="M:Game.Utils.XmlOperate.CreateNodes(System.String,System.Data.DataTable,System.Boolean)">
            <summary>
            创建一个子节点到指定的节点下，并为该子节点指定属性或子节点
            </summary>
            <param name="nodeName">要创建的子节点名称</param>
            <param name="dt">
            储存子节点的赋值信息(一个DataTable)
            行1(名称, 名称前含有@字符，则为属性)
            行2(值)</param>
            <param name="CreateNull">是否创建空值的节点或属性</param>
        </member>
        <member name="M:Game.Utils.XmlOperate.ChangeNode(System.String,System.Int32,System.String,System.String)">
            <summary>
            修改节点下的属性和子节点的值
            </summary>
            <param name="parentNodeName"></param>
            <param name="type"></param>
            <param name="thename"></param>
            <param name="thevalue"></param>
        </member>
        <member name="M:Game.Utils.XmlOperate.ChangeNode(System.Data.DataTable)">
            <summary>
            修改某个节点下的所有属性和一级子节点的值
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Game.Utils.XmlOperate.DeleteNode(System.String)">
            <summary>
            删除节点 (传入的 xPath 必须是要删除节点的父节点的xPath)
            </summary>
            <param name="nodeName">节点名称，可以是单一的，也可以是条件的，如 add, add[@key='aa']</param>
        </member>
        <member name="M:Game.Utils.XmlOperate.ConvertXmlNodeListDataTable(System.Xml.XmlNodeList)">
            <summary>
            提取一个节点下所有一级子节点及其所有属性并转化成DataTable保存数据
            </summary>
            <param name="xlist">节点集合 XmlNodeList</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Game.Utils.XmlOperate.ConvertXmlNodeListDataTable(System.Xml.XmlNodeList,System.Int32)">
            <summary>
            提取一个节点下所有一级子节点或所有属性并转化成DataTable保存数据
            </summary>
            <param name="xlist">节点集合 XmlNodeList</param>
            <param name="type">0为提取所有属性，1为提取所有子节点</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Game.Utils.XmlOperate.GetXmlNodeList(System.String,System.Int32)">
            <summary>
            提取指定XML文件某个节点的信息(包括属性及其子节点)
            </summary>
            <param name="nodes">要提取的节点位置</param>
            <param name="method">0提取单个节点，1提取所有相关节点</param>
            <returns>XmlNodeList</returns>
        </member>
        <member name="M:Game.Utils.XmlOperate.GetXmlElement(System.String)">
            <summary>
            提取单个节点的信息(包括属性及其子节点)
            </summary>
            <param name="nodes">指定节点</param>
            <returns>XmlElement</returns>
        </member>
        <member name="M:Game.Utils.XmlOperate.GetXml(System.String)">
            <summary>
            提取指定节点的指定属性或子节点的值
            </summary>
            <param name="name">指定属性或子节点</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlOperate.GetXml(System.String,System.Int32,System.String)">
            <summary>
            提取指定节点的指定属性或子节点的值
            </summary>
            <param name="nodes">指定节点</param>
            <param name="type">0为属性，1为节点</param>
            <param name="name">指定属性或子节点</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlOperate.CheckXml(System.String)">
            <summary>
            检测指定节点的属性或者子节点名称是否存在
            </summary>
            <param name="Name">指定属性或子节点</param>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.XmlOperate.fileContent">
            <summary>
            XML格式的内容
            </summary>
        </member>
        <member name="P:Game.Utils.XmlOperate.filePath">
            <summary>
            XML文件的绝对路径
            </summary>
        </member>
        <member name="P:Game.Utils.XmlOperate.xPath">
            <summary>
            xPath表达式
            </summary>
        </member>
        <member name="P:Game.Utils.XmlOperate.Method">
            <summary>
            操作方式
            </summary>
        </member>
        <member name="T:Game.Utils.OperateXmlMethod">
            <summary>
            XML文档的操作类型
            </summary>
        </member>
        <member name="F:Game.Utils.OperateXmlMethod.XmlProperty">
            <summary>
            仅操作属性
            </summary>
        </member>
        <member name="F:Game.Utils.OperateXmlMethod.XmlNodes">
            <summary>
            仅操作节点
            </summary>
        </member>
        <member name="F:Game.Utils.OperateXmlMethod.All">
            <summary>
            属性和节点都操作
            </summary>
        </member>
        <member name="T:Game.Utils.SimpleTimer`1">
            <summary>      
            包含一组方法和属性，提供简易的定时器应用。      
            </summary>      
            <typeparam name="T">表示与此类关联的对象的类型。</typeparam>      
        </member>
        <member name="M:Game.Utils.SimpleTimer`1.#ctor(`0,System.Double,System.Boolean)">
            <summary>         
            初始化 <see cref="T:Game.Utils.SimpleTimer`1"/> 类的新实例。          
            </summary>         
            <param name="obj">指定与此类关联的对象的实例。</param>         
            <param name="interval">指定引发事件的间隔时间（以毫秒为单位）。默认为 100 毫秒。</param>          
            <param name="autoReset">如果应在每次间隔结束时引发事件，则为 true；如果它仅在间隔第一次结束后引发一次事件，则为 false。默认值为 true。</param>          
        </member>
        <member name="M:Game.Utils.SimpleTimer`1.Run(System.Action{`0})">
            <summary>          
            执行定时器上的 <see cref="T:System.Action`1"/> 委托方法。          
            </summary>          
            <param name="action">指定一个 <see cref="T:System.Action`1"/> 委托。</param>         
        </member>
        <member name="M:Game.Utils.SimpleTimer`1.Run(System.Action{`0,System.Timers.ElapsedEventArgs})">
            <summary>          
            执行定时器上的 <see cref="T:System.Action`2"/> 委托方法。          
            </summary>          
            <param name="action">指定一个 <see cref="T:System.Action`2"/> 委托。</param>          
        </member>
        <member name="M:Game.Utils.SimpleTimer`1.Run(System.Action{`0,System.Timers.Timer})">
            <summary>          
            执行定时器上的 <see cref="T:System.Action`2"/> 委托方法。          
            </summary>          
            <param name="action">指定一个 <see cref="T:System.Action`2"/> 委托。</param>         
        </member>
        <member name="M:Game.Utils.SimpleTimer`1.Run(System.Action{`0,System.Timers.Timer,System.Timers.ElapsedEventArgs})">
            <summary>          
            执行定时器上的 <see cref="T:System.Action`3"/> 委托方法。          
            </summary>          
            <param name="action">指定一个 <see cref="T:System.Action`3"/> 委托。</param>       
        </member>
        <member name="P:Game.Utils.SimpleTimer`1.Object">
            <summary>          
            获取与此类关联的对象的实例。          
            </summary>         
        </member>
        <member name="P:Game.Utils.SimpleTimer`1.Timer">
            <summary>          
            获取用于生成定期事件的定时器的实例。          
            </summary>         
        </member>
        <member name="T:Game.Utils.ReflectionHelper">
            <summary>
            反射辅助类
            </summary>
        </member>
        <member name="M:Game.Utils.ReflectionHelper.GetType(System.String)">
            <summary>
            获取类型
            </summary>
            <param name="typeAndAssName"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.ReflectionHelper.GetType(System.String,System.String)">
            <summary>
            获取类型
            </summary>
            <param name="typeFullName"></param>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.StringBuffer">
            <summary>
            可变字符字符串，对StringBuilder的封装
            </summary>
        </member>
        <member name="M:Game.Utils.StringBuffer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.StringBuffer.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.#ctor(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="innerBuilder"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="maxCapacity"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Char)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Char[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Boolean)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Byte)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Decimal)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Double)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Int16)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Int64)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Object)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.SByte)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.Single)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.UInt16)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.UInt32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.op_Addition(Game.Utils.StringBuffer,System.UInt64)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.StringBuffer.Remove(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.Replace(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Game.Utils.StringBuffer.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.StringBuffer.InnerBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Game.Utils.StringBuffer.Length">
            <summary>
            
            </summary>
        </member>
        <member name="T:Game.Utils.SysInfo">
            <summary>
            系统信息
            </summary>
        </member>
        <member name="M:Game.Utils.SysInfo.GetCpuUsage">
            <summary>
            获得Cpu使用率
            </summary>
            <returns>返回使用率</returns>
        </member>
        <member name="T:Game.Utils.SysInfo.CpuUsage">
            <summary>
            Defines an abstract base class for implementations of CPU usage counters.
            </summary>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsage.Create">
            <summary>
            Creates and returns a CpuUsage instance that can be used to query the CPU time on this operating system.
            </summary>
            <returns>An instance of the CpuUsage class.</returns>
            <exception cref="T:System.NotSupportedException">This platform is not supported -or- initialization of the CPUUsage object failed.</exception>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsage.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsage.m_CpuUsage">
            <summary>
            Holds an instance of the CPUUsage class.
            </summary>
        </member>
        <member name="T:Game.Utils.SysInfo.CpuUsage9x">
            <summary>
            Inherits the CPUUsage class and implements the Query method for Windows 9x systems.
            </summary>
            <remarks>
            <p>This class works on Windows 98 and Windows Millenium Edition.</p>
            <p>You should not use this class directly in your code. Use the CPUUsage.Create() method to instantiate a CPUUsage object.</p>
            </remarks>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsage9x.#ctor">
            <summary>
            Initializes a new CPUUsage9x instance.
            </summary>
            <exception cref="T:System.NotSupportedException">One of the system calls fails.</exception>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsage9x.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsage9x.Finalize">
            <summary>
            Closes the allocated resources.
            </summary>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsage9x.m_StatData">
            <summary>Holds the registry key that's used to read the CPU load.</summary>
        </member>
        <member name="T:Game.Utils.SysInfo.CpuUsageNt">
            <summary>
            Inherits the CPUUsage class and implements the Query method for Windows NT systems.
            </summary>
            <remarks>
            <p>This class works on Windows NT4, Windows 2000, Windows XP, Windows .NET Server and higher.</p>
            <p>You should not use this class directly in your code. Use the CPUUsage.Create() method to instantiate a CPUUsage object.</p>
            </remarks>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsageNt.SYSTEM_BASICINFORMATION">
            <summary>Returns the number of processors in the system in a SYSTEM_BASIC_INFORMATION structure.</summary>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsageNt.SYSTEM_PERFORMANCEINFORMATION">
            <summary>Returns an opaque SYSTEM_PERFORMANCE_INFORMATION structure.</summary>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsageNt.SYSTEM_TIMEINFORMATION">
            <summary>Returns an opaque SYSTEM_TIMEOFDAY_INFORMATION structure.</summary>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsageNt.NO_ERROR">
            <summary>The value returned by NtQuerySystemInformation is no error occurred.</summary>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsageNt.#ctor">
            <summary>
            Initializes a new CpuUsageNt instance.
            </summary>
            <exception cref="T:System.NotSupportedException">One of the system calls fails.</exception>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsageNt.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="M:Game.Utils.SysInfo.CpuUsageNt.NtQuerySystemInformation(System.Int32,System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            NtQuerySystemInformation is an internal Windows function that retrieves various kinds of system information.
            </summary>
            <param name="dwInfoType">One of the values enumerated in SYSTEM_INFORMATION_CLASS, indicating the kind of system information to be retrieved.</param>
            <param name="lpStructure">Points to a buffer where the requested information is to be returned. The size and structure of this information varies depending on the value of the SystemInformationClass parameter.</param>
            <param name="dwSize">Length of the buffer pointed to by the SystemInformation parameter.</param>
            <param name="returnLength">Optional pointer to a location where the function writes the actual size of the information requested.</param>
            <returns>Returns a success NTSTATUS if successful, and an NTSTATUS error code otherwise.</returns>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsageNt.oldIdleTime">
            <summary>Holds the old idle time.</summary>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsageNt.oldSystemTime">
            <summary>Holds the old system time.</summary>
        </member>
        <member name="F:Game.Utils.SysInfo.CpuUsageNt.processorCount">
            <summary>Holds the number of processors in the system.</summary>
        </member>
        <member name="T:Game.Utils.TextFilter">
            <summary>
            提供字符串过滤方法
            </summary>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterScript(System.String)">
            <summary>
            脚本过滤
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterHtml(System.String)">
            <summary>
            Html代码过滤
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterObject(System.String)">
            <summary>
            过滤 Object 标签
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterAHrefScript(System.String)">
            <summary>
            过滤链接脚本
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterIframe(System.String)">
            <summary>
            过滤Iframe标签
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterFrameset(System.String)">
            <summary>
            过滤Frameset标签
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterSrc(System.String)">
            <summary>
            过滤包含 Src 的标签
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterAll(System.String)">
            <summary>
            过滤全部
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.Process(Game.Utils.FilterType,System.String)">
            <summary>
            过滤XHtml标签
            </summary>
            <param name="filterType">过滤类型</param>
            <param name="filterContent">要过滤内容</param>
            <returns>返回过滤后的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterUserInput(System.String)">
            <summary>
            过滤输入字符串为字母和数字,@,-
            </summary>
            <param name="inputStr">输入字符串</param>
            <returns>返回过滤后的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterBR(System.String)">
            <summary>
            过滤给定字符串中的回车及换行符
            </summary>
            <param name="filterStr">要过滤的字符串</param>
            <returns>过滤后返回的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterXHtml(System.String,System.Boolean)">
            <summary>
            过滤所有 XHTML 标签
            </summary>
            <param name="content">XHtml 内容</param>
            <param name="encode">是否对过滤后的内容编码</param>
            <returns>过滤后返回的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterXHtml(System.String)">
            <summary>
            过滤所有 XHTML 标签,并编码过滤后返回的字符串
            </summary>
            <param name="content">XHtml 内容</param>
            <returns>过滤后返回的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterTrim(System.String)">
            <summary>
            过滤字符串尾部的回车/换行/空格
            </summary>
            <param name="content">要过滤的字符串</param>
            <returns>过滤后返回的字符串</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterTextFromHTML(System.String)">
            <summary>
            从HTML中获取文本,保留br,p,img标签
            </summary>
            <param name="contentHtml">要过滤的Html文本</param>
            <returns>过滤后返回的文本</returns>
        </member>
        <member name="M:Game.Utils.TextFilter.FilterUnsafeHtml(System.String)">
            <summary>
            过滤HTML中的不安全标签
            </summary>
            <param name="content">要过滤的Html文本</param>
            <returns>过滤后返回的文本</returns>
        </member>
        <member name="T:Game.Utils.FilterType">
            <summary>
            过滤类型
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.Script">
            <summary>
            脚本
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.Html">
            <summary>
            Html代码
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.AHrefScript">
            <summary>
            链接脚本
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.Iframe">
            <summary>
            iframe
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.Frameset">
            <summary>
            frameSet
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.Src">
            <summary>
            Src
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.BadWords">
            <summary>
            脏字
            </summary>
        </member>
        <member name="F:Game.Utils.FilterType.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:Game.Utils.PerfCounter">
            <summary>
            性能计数器
            </summary>
        </member>
        <member name="M:Game.Utils.PerfCounter.#ctor(System.Boolean)">
            <summary>
            创建类的实例
            </summary>
            <param name="startTimer">是否立即执行Start()方法</param>
        </member>
        <member name="M:Game.Utils.PerfCounter.Stop">
            <summary>
            停止计数
            </summary>
        </member>
        <member name="M:Game.Utils.PerfCounter.Start">
            <summary>
            开始计时
            </summary>
        </member>
        <member name="M:Game.Utils.PerfCounter.ReStart">
            <summary>
            重新计时
            </summary>
        </member>
        <member name="P:Game.Utils.PerfCounter.Duration">
            <summary>
            返回运行时间
            </summary>
            <value>运行时间</value>
        </member>
        <member name="T:Game.Utils.FsoMethod">
            <summary>
            文件系统的处理对象枚举
            </summary>
        </member>
        <member name="F:Game.Utils.FsoMethod.Folder">
            <summary>
            仅用于处理文件夹
            </summary>
        </member>
        <member name="F:Game.Utils.FsoMethod.File">
            <summary>
            仅用于处理文件
            </summary>
        </member>
        <member name="F:Game.Utils.FsoMethod.All">
            <summary>
            文件和文件夹都参与处理
            </summary>
        </member>
        <member name="T:Game.Utils.FolderInfo">
            <summary>
            文件夹信息
            </summary>
        </member>
        <member name="M:Game.Utils.FolderInfo.#ctor">
            <summary>
            初始化文件夹信息
            </summary>
        </member>
        <member name="M:Game.Utils.FolderInfo.#ctor(System.String,System.String,System.String,System.Byte,System.String,System.DateTime,System.Int64)">
            <summary>
            初始化文件夹信息
            </summary>
            <param name="name"></param>
            <param name="fullName"></param>
            <param name="contentType"></param>
            <param name="type"></param>
            <param name="path"></param>
            <param name="lastWriteTime"></param>
            <param name="length"></param>
        </member>
        <member name="P:Game.Utils.FolderInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Game.Utils.FolderInfo.FullName">
            <summary>
            全名
            </summary>
        </member>
        <member name="P:Game.Utils.FolderInfo.ContentType">
            <summary>
            文件类型，如果是文件夹则置空
            </summary>
        </member>
        <member name="P:Game.Utils.FolderInfo.Type">
            <summary>
            类型：0为文件夹，1为文件
            </summary>
        </member>
        <member name="P:Game.Utils.FolderInfo.FsoType">
            <summary>
            类型：0为文件夹，1为文件
            </summary>
        </member>
        <member name="P:Game.Utils.FolderInfo.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Game.Utils.FolderInfo.LastWriteTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Game.Utils.FolderInfo.Length">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="T:Game.Utils.FileManager">
            <summary>
            文件系统的处理类
            </summary>
        </member>
        <member name="M:Game.Utils.FileManager.ReadFile(System.String)">
            <summary>
            以文件流的形式读取指定文件的内容,默认(UTF8)编码
            </summary>
            <param name="file">指定的文件及其完全路径</param>
            <returns>返回文件内容</returns>
        </member>
        <member name="M:Game.Utils.FileManager.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            以文件流的形式读取指定文件的内容
            </summary>
            <param name="file">指定的文件及其完全路径</param>
            <param name="encoding">文件编码</param>
            <returns>返回文件内容</returns>
        </member>
        <member name="M:Game.Utils.FileManager.ReadFileReturnBytes(System.String)">
            <summary>
            以字节数组的形式读取指定的文件内容
            </summary>
            <param name="filePath">指定文件及其完全路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.FileManager.WriteFile(System.String,System.String)">
            <summary>
            以文件流的形式将内容写入到指定文件中（如果该文件或文件夹不存在则创建）文件编码 缺省 UTF-8
            </summary>
            <param name="file">文件名和指定路径</param>
            <param name="fileContent">文件内容</param>      
        </member>
        <member name="M:Game.Utils.FileManager.WriteFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            以文件流的形式将内容写入到指定文件中（如果该文件或文件夹不存在则创建）
            默认是带签名的 UTF8
            </summary>
            <param name="file">文件名和指定路径</param>
            <param name="fileContent">文件内容</param>
            <param name="encoding">文件编码 缺省 UTF-8</param>
        </member>
        <member name="M:Game.Utils.FileManager.WriteFile(System.String,System.String,System.Boolean)">
            <summary>
            以文件流的形式将内容写入到指定文件中（如果该文件或文件夹不存在则创建,存在则追加）
            不带签名的 UTF8 编码，生成 shtml 文件必用
            </summary>
            <param name="file">文件名和指定路径</param>
            <param name="fileContent">文件内容</param>
            <param name="append">是否追加指定内容到该文件中</param>     
        </member>
        <member name="M:Game.Utils.FileManager.WriteFile(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            以文件流的形式将内容写入到指定文件中（如果该文件或文件夹不存在则创建,存在则追加）
            </summary>
            <param name="file">文件名和指定路径</param>
            <param name="fileContent">文件内容</param>
            <param name="append">是否追加指定内容到该文件中</param>
            <param name="encoding">文件编码 缺省 UTF-8</param>
            <returns>返回布尔值</returns>
        </member>
        <member name="M:Game.Utils.FileManager.WriteBuffToFile(System.Byte[],System.String)">
            <summary>
            写字节数组到文件
            </summary>
            <param name="buff"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Game.Utils.FileManager.WriteBuffToFile(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            写字节数组到文件
            </summary>
            <param name="buff"></param>
            <param name="offset">开始位置</param>
            <param name="len"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:Game.Utils.FileManager.GetDirectoryListForObject(System.String,Game.Utils.FsoMethod)">
            <summary>
            获取指定目录下的所有目录及其文件信息
            </summary>
            <param name="directory">文件目录</param>
            <param name="method">获取方式</param>
            <returns>返回目录文件列表的 FolderInfo 对象</returns>
        </member>
        <member name="M:Game.Utils.FileManager.GetDirectoryFilesListForObject(System.String,Game.Utils.FsoMethod)">
            <summary>
            获取指定目录的目录信息
            </summary>
            <param name="directory">文件目录</param>
            <param name="method">获取方式</param>
            <returns>返回目录文件列表的 FolderInfo 对象</returns>
        </member>
        <member name="M:Game.Utils.FileManager.GetDirectoryList(System.String,Game.Utils.FsoMethod)">
            <summary>
            获取指定目录下的所有目录及其文件信息
            </summary>
            <param name="directory">文件目录</param>
            <param name="method">获取方式</param>
            <returns>返回目录文件列表的DataTable对象</returns>
        </member>
        <member name="M:Game.Utils.FileManager.GetDirectoryList(System.IO.DirectoryInfo,Game.Utils.FsoMethod)">
            <summary>
            获取指定目录下的所有目录及其文件信息
            </summary>
            <param name="directoryInfo">目录</param>
            <param name="method">获取方式</param>
            <returns>返回目录文件列表的DataTable对象</returns>
        </member>
        <member name="M:Game.Utils.FileManager.Merge(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            将两个结构一样的 DataTable 组合成一个 DataTable
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Game.Utils.FileManager.GetDirectoryInfo(System.String)">
            <summary>
            获取指定文件目录信息，如：文件夹大小，文件夹数，文件数
            </summary>
            <param name="directory">指定文件夹路径</param>
            <returns>返回文件目录信息数组</returns>
        </member>
        <member name="M:Game.Utils.FileManager.GetDirectoryFilesList(System.String,Game.Utils.FsoMethod)">
            <summary>
            获取指定目录的目录信息
            </summary>
            <param name="directory">目录</param>
            <param name="method">获取方式</param>
            <returns>返回目录文件列表的DataTable对象</returns>
        </member>
        <member name="M:Game.Utils.FileManager.Exists(System.String,Game.Utils.FsoMethod)">
            <summary>
            判断文件或文件夹是否存在，存在为 true，否则为 false;
            </summary>
            <param name="file">指定文件及其路径</param>
            <param name="method">判断方式</param>
            <returns>返回 true 存在,false 不存在</returns>
        </member>
        <member name="M:Game.Utils.FileManager.Create(System.String,Game.Utils.FsoMethod)">
            <summary>
            新建文件或文件夹
            </summary>
            <param name="file">文件或文件夹及其路径</param>
            <param name="method">新建方式</param>
        </member>
        <member name="M:Game.Utils.FileManager.CopyFile(System.String,System.String)">
            <summary>
            复制文件，如果目标文件已经存在则覆盖掉
            </summary>
            <param name="srcFile">源文件</param>
            <param name="desFile">目标文件</param>
        </member>
        <member name="M:Game.Utils.FileManager.CopyFileStream(System.String,System.String)">
            <summary>
            以流的形式复制拷贝文件
            </summary>
            <param name="srcFile">源文件</param>
            <param name="desFile">目标文件</param>
            <returns>返回成功 true,失败 false</returns>
        </member>
        <member name="M:Game.Utils.FileManager.CopyDirectories(System.String,System.String)">
            <summary>
            复制文件夹中的所有内容及其子目录所有文件
            </summary>
            <param name="srcDir">源文件夹及其路径</param>
            <param name="desDir">目标文件夹及其路径</param>
        </member>
        <member name="M:Game.Utils.FileManager.Move(System.String,System.String,Game.Utils.FsoMethod)">
            <summary>
            移动文件或文件夹
            </summary>
            <param name="srcFile">原始文件或文件夹</param>
            <param name="desFile">目标文件或文件夹</param>
            <param name="method">移动方式</param>
        </member>
        <member name="M:Game.Utils.FileManager.Delete(System.String,Game.Utils.FsoMethod)">
            <summary>
            删除文件或文件夹
            </summary>
            <param name="file">文件或文件夹及其路径</param>
            <param name="method">删除方式</param>
        </member>
        <member name="T:Game.Utils.CWHEncryptNet">
            <summary>
            异或对称加密
            </summary>
        </member>
        <member name="M:Game.Utils.CWHEncryptNet.XorEncrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="sourceData"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.CWHEncryptNet.XorCrevasse(System.String)">
            <summary>
            解密
            </summary>
            <param name="encrypData"></param>
            <returns></returns>
        </member>
        <member name="T:Game.Utils.XmlDocumentExtender">
            <summary>
            XmlDocument扩展类
            
            目的:用于优化和减少代码书写量
            备注:Element  译为:元素  
                 Document 译为:文档 
                 Node     译为:节点
            </summary>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.#ctor(System.Xml.XmlNameTable)">
            <summary>
            扩展的构造函数
            </summary>
            <param name="nt"></param>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.Load(System.String)">
            <summary>
            加载的文件名(含路径)
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.AppendChildElementByNameValue(System.Xml.XmlElement@,System.String,System.Object)">
            <summary>
            在指定的Xml元素下,添加子Xml元素
            </summary>
            <param name="xmlElement">被追加子元素的Xml元素</param>
            <param name="childElementName">要添加的Xml元素名称</param>
            <param name="childElementValue">要添加的Xml元素值</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.AppendChildElementByNameValue(System.Xml.XmlElement@,System.String,System.Object,System.Boolean)">
            <summary>
            在指定的Xml元素下,添加子Xml元素
            </summary>
            <param name="xmlElement">被追加子元素的Xml元素</param>
            <param name="childElementName">要添加的Xml元素名称</param>
            <param name="childElementValue">要添加的Xml元素值</param>
            <param name="IsCDataSection">是否是CDataSection类型的子元素</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.AppendChildElementByNameValue(System.Xml.XmlNode@,System.String,System.Object)">
            <summary>
            在指定的Xml结点下,添加子Xml元素
            </summary>
            <param name="xmlNode">被追加子元素的Xml节点</param>
            <param name="childElementName">要添加的Xml元素名称</param>
            <param name="childElementValue">要添加的Xml元素值</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.AppendChildElementByNameValue(System.Xml.XmlNode@,System.String,System.Object,System.Boolean)">
            <summary>
            在指定的Xml结点下,添加子Xml元素
            </summary>
            <param name="xmlNode">被追加子元素的Xml节点</param>
            <param name="childElementName">要添加的Xml元素名称</param>
            <param name="childElementValue">要添加的Xml元素值</param>
            <param name="IsCDataSection">是否是CDataSection类型的子元素</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.AppendChildElementByDataRow(System.Xml.XmlElement@,System.Data.DataColumnCollection,System.Data.DataRow)">
            <summary>
            通过数据行向当前XML元素下追加子元素
            </summary>
            <param name="xmlElement">被追加子元素的Xml元素</param>
            <param name="dcc">当前数据表中的列集合</param>
            <param name="dr">当前行数据</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.AppendChildElementByDataRow(System.Xml.XmlElement@,System.Data.DataColumnCollection,System.Data.DataRow,System.String)">
            <summary>
            通过数据行向当前XML元素下追加子元素
            </summary>
            <param name="xmlElement">被追加子元素的Xml元素</param>
            <param name="dcc">当前数据表中的列集合</param>
            <param name="dr">当前行数据</param>
            <param name="removecols">不会被追加的列名</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.InitializeNode(System.String)">
            <summary>
            实始化节点, 当节点存在则清除当前路径下的所有子结点, 如不存在则直接创建该结点
            </summary>
            <param name="xmlpath"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.RemoveNodeAndChildNode(System.String)">
            <summary>
            删除指定路径下面的所有子结点和自身
            </summary>
            <param name="xmlpath">指定路径</param>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.CreateNode(System.String)">
            <summary>
            创建指定路径下的节点
            </summary>
            <param name="xmlpath">节点路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.GetSingleNodeValue(System.Xml.XmlNode,System.String)">
            <summary>
            得到指定路径的节点值
            </summary>
            <param name="xmlnode">要查找节点</param>
            <param name="path">指定路径</param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.XmlDocumentExtender.FiltrateControlCharacter(System.String)">
            <summary>
            过滤控制字符,包括0x00 - 0x08,0x0b - 0x0c,0x0e - 0x1f
            </summary>
            <param name="content">要过滤的内容</param>
            <returns>过滤后的内容</returns>
        </member>
        <member name="T:Game.Utils.ICacheStrategy">
            <summary>
            缓存策略接口
            定义如何添加、获取、删除需要缓存的对象
            </summary>
        </member>
        <member name="M:Game.Utils.ICacheStrategy.Set(System.String,System.Object)">
            <summary>
            添加对象
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Game.Utils.ICacheStrategy.Set(System.String,System.Object,System.DateTime)">
            <summary>
            添加对象
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiresAt"></param>
        </member>
        <member name="M:Game.Utils.ICacheStrategy.Get(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.ICacheStrategy.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.ICacheStrategy.Remove(System.String)">
            <summary>
            删除对象
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Game.Utils.DefaultCacheStrategy">
            <summary>
            默认缓存策略
            </summary>
        </member>
        <member name="M:Game.Utils.DefaultCacheStrategy.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Game.Utils.DefaultCacheStrategy.Set(System.String,System.Object)">
            <summary>
            添加对象
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Game.Utils.DefaultCacheStrategy.Set(System.String,System.Object,System.DateTime)">
            <summary>
            添加对象
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiresAt"></param>
        </member>
        <member name="M:Game.Utils.DefaultCacheStrategy.Get(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DefaultCacheStrategy.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DefaultCacheStrategy.Remove(System.String)">
            <summary>
            删除对象
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Game.Utils.DataHelper">
            <summary>
            数据辅助类,提供从 DataTable 到 TEntity 的转换
            </summary>
        </member>
        <member name="M:Game.Utils.DataHelper.ConvertDataTableToObjects``1(System.Data.DataTable)">
            <summary>
            转换DataTable到实体对象集合
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataHelper.ConvertRowToObject``1(System.Data.DataRow)">
            <summary>
            转换DataRow到实体对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataHelper.ConvertRowToObject(System.Type,System.Data.DataRow)">
            <summary>
            转换DataRow到实体对象
            </summary>
            <param name="objType"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataHelper.DistillCommandParameter(System.String,System.String)">
            <summary>
            从SQL命令中提取参数
            </summary>
            <param name="sqlStatement"></param>
            <param name="paraPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataHelper.DoDistill(System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            提取参数
            </summary>
            <param name="sqlStatement"></param>
            <param name="paraList"></param>
            <param name="paraPrefix"></param>
        </member>
        <member name="M:Game.Utils.DataHelper.FillCommandParameterValue(System.Data.IDbCommand,System.Object)">
            <summary>
            填充命令参数值
            </summary>
            <param name="command"></param>
            <param name="entityOrRow"></param>
        </member>
        <member name="M:Game.Utils.DataHelper.GetColumnValue(System.Object,System.String)">
            <summary>
            获取列值
            </summary>
            <param name="entityOrRow"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataHelper.GetSafeDbValue(System.Object)">
            <summary>
            获取安全的数据值
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.DataHelper.RefreshEntityFields(System.Object,System.Data.DataRow)">
            <summary>
            刷新实体属性
            </summary>
            <param name="entity"></param>
            <param name="row"></param>
        </member>
        <member name="M:Game.Utils.DataHelper.RefreshEntityFields(System.Object,System.Data.DataRow,System.Collections.Generic.IList{System.String})">
            <summary>
            刷新实体属性
            </summary>
            <param name="entity"></param>
            <param name="row"></param>
            <param name="refreshFields"></param>
        </member>
        <member name="T:Game.Utils.GameRequest">
            <summary>
            Request 操作类
            </summary>
        </member>
        <member name="M:Game.Utils.GameRequest.GetFloat(System.String,System.Single)">
            <summary>
            获取 Get 请求的float参数值
            </summary>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的float参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetQueryFloat(System.String,System.Single)">
            <summary>
            获取 Get 请求传递的float参数值
            </summary>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的float参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetFormFloat(System.String,System.Single)">
            <summary>
            获取表单提交的float参数值
            </summary>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的float参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetFormInt(System.String,System.Int32)">
            <summary>
            获取表单提交的int参数值
            </summary>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的int参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetFormInt(System.Web.HttpRequest,System.String,System.Int32)">
            <summary>
            获取表单提交的int参数值
            </summary>
            <param name="request">请求对象</param>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的int参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetQueryInt(System.String,System.Int32)">
            <summary>
            获取 Get 请求传递的int参数值
            </summary>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的int参数值</returns>        
        </member>
        <member name="M:Game.Utils.GameRequest.GetQueryInt(System.Web.HttpRequest,System.String,System.Int32)">
            <summary>
            获取 Get 请求传递的int参数值
            </summary>
            <param name="request">请求对象</param>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的int参数值</returns>  
        </member>
        <member name="M:Game.Utils.GameRequest.GetInt(System.String,System.Int32)">
            <summary>
            获取 Get 请求的int参数值
            </summary>
            <param name="strName">参数名称</param>
            <param name="defValue">设置参数的默认值，供返回使用</param>
            <returns>返回转换后的int参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetQueryString(System.String)">
            <summary>
            获取 HTTP 查询字符串变量
            </summary>
            <param name="strName">参数变量名</param>
            <returns>返回对应参数变量的值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetQueryString(System.Web.HttpRequest,System.String)">
            <summary>
            获取 HTTP 查询字符串变量
            </summary>
            <param name="request">请求对象</param>
            <param name="strName">参数变量名</param>
            <returns>返回对应参数变量的值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetString(System.String)">
            <summary>
            获取 HTTP 查询字符串变量
            </summary>
            <param name="strName">参数变量名</param>
            <returns>返回对应参数变量的值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetString(System.Web.HttpRequest,System.String)">
            <summary>
            获取 HTTP 查询字符串变量
            </summary>
            <param name="request">请求对象</param>
            <param name="strName">参数变量名</param>
            <returns>返回对应参数变量的值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetServerString(System.String)">
            <summary>
            获取 Web 服务器变量
            </summary>
            <param name="strName">参数变量名</param>
            <returns>返回对应参数变量的值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetFormString(System.String)">
            <summary>
            获取表单提交的string参数值
            </summary>
            <param name="strName">参数名称</param>      
            <returns>返回转换后的string参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetFormString(System.Web.HttpRequest,System.String)">
            <summary>
            获取表单提交的string参数值
            </summary>
            <param name="request">请求对象</param>
            <param name="strName">参数名称</param>      
            <returns>返回转换后的string参数值</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetParamCount">
            <summary>
            返回表单或Url参数的总个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetHost">
            <summary>
            获取主机名称
            </summary>
            <returns>返回主机名称</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetUserIP">
            <summary>
            获取客户端的 IP 信息
            </summary>
            <returns>返回客户端 IP 地址</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetUserBrowser">
            <summary>
            获取访问者所使用的浏览器名
            </summary>
        </member>
        <member name="M:Game.Utils.GameRequest.GetUserOsname">
            <summary>
            获取访问者所使用的操作系统名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetCurrentFullHost">
            <summary>
            获取完整的主机名称及端口号码
            </summary>
            <returns>返回完整的主机名称及端口号码</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetServerDomain">
            <summary>
            获取网站域名
            </summary>
        </member>
        <member name="M:Game.Utils.GameRequest.GetPageName">
            <summary>
            获取当前请求的文件名
            </summary>
            <returns>返回文件名</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetRawUrl">
            <summary>
            获取当前请求的原始 URL 
            </summary>
            <returns>返回原始请求的 URL</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetUrl">
            <summary>
            获取有关当前请求的 URL 的信息
            </summary>
            <returns>返回当前请求的 URL 的信息</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.GetUrlReferrer">
            <summary>
            获取客户端上次请求的 URL 路径，该请求链接到当前的 URL
            </summary>
            <returns>返回当前 URL 路径</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.IsBrowserGet">
            <summary>
            获取是否是书籍的浏览器访问的信息
            </summary>
            <returns>返回浏览器的功能信息</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.IsGet">
            <summary>
            客户端是否使用 GET 方法的 HTTP数据传输
            </summary>
            <returns>返回表示是与否</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.IsPost">
            <summary>
            客户端是否使用 POST 方法的 HTTP数据传输
            </summary>
            <returns>返回表示是与否</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.IsSearchEnginesGet">
            <summary>
            搜索引擎来源判断
            </summary>
            <returns>返回表示是与否</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.IsRobots">
            <summary>
            是否被判断为机器人 
            </summary>
        </member>
        <member name="M:Game.Utils.GameRequest.SaveRequestFile(System.String)">
            <summary>
            保存上载文件的内容。
            </summary>
            <param name="path">上载文件路径。</param>
        </member>
        <member name="M:Game.Utils.GameRequest.IsCrossSitePost">
            <summary>
            返回当前页面是否是跨站提交
            </summary>
            <returns>当前页面是否是跨站提交</returns>
        </member>
        <member name="M:Game.Utils.GameRequest.IsCrossSitePost(System.String,System.String)">
            <summary>
            判断是否是跨站提交
            </summary>
            <param name="urlReferrer">上个页面地址</param>
            <param name="host">网站url</param>
            <returns></returns>
        </member>
        <member name="P:Game.Utils.GameRequest.Request">
            <summary>
            当前 Http 请求对象
            </summary>
        </member>
        <member name="P:Game.Utils.GameRequest.IsPostFromAnotherDomain">
            <summary>
            是否从其他连接向本域名连接
            </summary>
        </member>
    </members>
</doc>
